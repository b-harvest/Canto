// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/liquidstaking.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	"gopkg.in/yaml.v2"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChunkState int32

const (
	// Default state of a chunk when a msgServer receives MsgLiquidStake.
	// This state indicates that the chunk is ready to be paired
	// with an insurance.
	CHUNK_STATE_PAIRING ChunkState = 0
	// This state indicates that the chunk is paired with an insurance
	// which has the lowest fee rate.
	CHUNK_STATE_PAIRED ChunkState = 1
	// For various reasons, the insurance paired to Chunk can be un-paired.
	// At this time, if there is no insurance candidate,
	// a chunk enters this state.
	CHUNK_STATE_UNPAIRING_FOR_REPAIRING ChunkState = 2
	// When a liquid staker sends a MsgLiquidUnstake, the last ranked paired chunk
	// enters this state and waits until the un-bonding period times out.
	CHUNK_STATE_UNPAIRING_FOR_UNSTAKE ChunkState = 3
)

var ChunkState_name = map[int32]string{
	0: "CHUNK_STATE_PAIRING",
	1: "CHUNK_STATE_PAIRED",
	2: "CHUNK_STATE_UNPAIRING_FOR_REPAIRING",
	3: "CHUNK_STATE_UNPAIRING_FOR_UNSTAKE",
}

var ChunkState_value = map[string]int32{
	"CHUNK_STATE_PAIRING":                 0,
	"CHUNK_STATE_PAIRED":                  1,
	"CHUNK_STATE_UNPAIRING_FOR_REPAIRING": 2,
	"CHUNK_STATE_UNPAIRING_FOR_UNSTAKE":   3,
}

func (x ChunkState) String() string {
	return proto.EnumName(ChunkState_name, int32(x))
}

func (ChunkState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}

type InsuranceState int32

const (
	// Default state of an insurance when a msgServer receives
	// MsgInsuranceProvide. This state indicates that
	// the insurance is ready to be paired with a chunk.
	INSURANCE_STATE_PAIRING InsuranceState = 0
	// This state indicates that the insurance is paired with a chunk.
	// While the insurance is in this state, it serves as a form of protection for
	// the chunk by insuring it against unexpected loss that may occur due to
	// validator slashing.
	INSURANCE_STATE_PAIRED InsuranceState = 1
	// For various reasons, the insurance paired to Chunk can enters this state.
	// The insurance in this state wait until
	// the paired chunk's un-bonding period times out.
	INSURANCE_STATE_UNPAIRING_FOR_REPAIRING InsuranceState = 2
	// Insurance enters this state when msgServer receives MsgWithdrawInsurance.
	// The insurance waits until the paired chunk's un-bonding period times out.
	INSURANCE_STATE_UNPAIRING_FOR_WITHDRAW InsuranceState = 3
	// Every begin block, the module checks all insurances have enough balance to
	// cover slash. If not, the insurance enters this state. Insurance provider
	// can re-fill token amount of the insurance by sending MsgRefillInsurance or
	// cancel the insurance by sending MsgCancelInsuranceProvide.
	INSURANCE_STATE_VULNERABLE InsuranceState = 4
)

var InsuranceState_name = map[int32]string{
	0: "INSURANCE_STATE_PAIRING",
	1: "INSURANCE_STATE_PAIRED",
	2: "INSURANCE_STATE_UNPAIRING_FOR_REPAIRING",
	3: "INSURANCE_STATE_UNPAIRING_FOR_WITHDRAW",
	4: "INSURANCE_STATE_VULNERABLE",
}

var InsuranceState_value = map[string]int32{
	"INSURANCE_STATE_PAIRING":                 0,
	"INSURANCE_STATE_PAIRED":                  1,
	"INSURANCE_STATE_UNPAIRING_FOR_REPAIRING": 2,
	"INSURANCE_STATE_UNPAIRING_FOR_WITHDRAW":  3,
	"INSURANCE_STATE_VULNERABLE":              4,
}

func (x InsuranceState) String() string {
	return proto.EnumName(InsuranceState_name, int32(x))
}

func (InsuranceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}

// Params defines the parameters for the module.
type Params struct {
	// next_epoch_chunk_size is the size of chunk.
	// This param is managed by gov module, but the change
	// will always applied in the next epoch for safety.
	NextEpochChunkSize uint64 `protobuf:"varint,1,opt,name=next_epoch_chunk_size,json=nextEpochChunkSize,proto3" json:"next_epoch_chunk_size,omitempty"`
	// max_paired_chunk is the maximum number of chunks
	// that can be paired with an insurance.
	MaxPairedChunk uint64 `protobuf:"varint,2,opt,name=max_paired_chunk,json=maxPairedChunk,proto3" json:"max_paired_chunk,omitempty"`
}

// String returns a human-readable string representation of the parameters.
func (m *Params) String() string {
	out, _ := yaml.Marshal(m)
	return string(out)
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNextEpochChunkSize() uint64 {
	if m != nil {
		return m.NextEpochChunkSize
	}
	return 0
}

func (m *Params) GetMaxPairedChunk() uint64 {
	if m != nil {
		return m.MaxPairedChunk
	}
	return 0
}

type Chunk struct {
	// Id of the chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Amount of native token to be liquid staked
	TokenAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"token_amount"`
	// Id of Paired insurance, 0 means no insurance
	InsuranceId uint64 `protobuf:"varint,3,opt,name=insurance_id,json=insuranceId,proto3" json:"insurance_id,omitempty"`
	// State of the chunk
	State ChunkState `protobuf:"varint,4,opt,name=state,proto3,enum=canto.liquidstaking.v1.ChunkState" json:"state,omitempty"`
}

// String returns a human-readable string representation of the parameters.
func (m *Chunk) String() string {
	out, _ := yaml.Marshal(m)
	return string(out)
}

func (m *Chunk) Reset()      { *m = Chunk{} }
func (*Chunk) ProtoMessage() {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

type Insurance struct {
	// Id of the insurance
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Address of the insurance provider
	ProviderAddress string `protobuf:"bytes,3,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	// Amount of native token to guard slashing
	TokenAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"token_amount"`
	// Fee rate of the insurance
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	State   InsuranceState                         `protobuf:"varint,6,opt,name=state,proto3,enum=canto.liquidstaking.v1.InsuranceState" json:"state,omitempty"`
}

// String returns a human-readable string representation of the parameters.
func (m *Insurance) String() string {
	out, _ := yaml.Marshal(m)
	return string(out)
}

func (m *Insurance) Reset()      { *m = Insurance{} }
func (*Insurance) ProtoMessage() {}
func (*Insurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{2}
}
func (m *Insurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Insurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Insurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insurance.Merge(m, src)
}
func (m *Insurance) XXX_Size() int {
	return m.Size()
}
func (m *Insurance) XXX_DiscardUnknown() {
	xxx_messageInfo_Insurance.DiscardUnknown(m)
}

var xxx_messageInfo_Insurance proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("canto.liquidstaking.v1.ChunkState", ChunkState_name, ChunkState_value)
	proto.RegisterEnum("canto.liquidstaking.v1.InsuranceState", InsuranceState_name, InsuranceState_value)
	proto.RegisterType((*Params)(nil), "canto.liquidstaking.v1.Params")
	proto.RegisterType((*Chunk)(nil), "canto.liquidstaking.v1.Chunk")
	proto.RegisterType((*Insurance)(nil), "canto.liquidstaking.v1.Insurance")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/liquidstaking.proto", fileDescriptor_d5ab11aad71f7b33)
}

var fileDescriptor_d5ab11aad71f7b33 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x77, 0xdb, 0xc2, 0x0f, 0x06, 0xd2, 0xdf, 0x3a, 0x2a, 0xd4, 0x9a, 0x6c, 0x01, 0x23,
	0x60, 0x09, 0xbb, 0x41, 0x13, 0x35, 0xc4, 0xcb, 0x52, 0x56, 0xd9, 0x40, 0x56, 0x9c, 0xb6, 0x92,
	0x78, 0x99, 0x0c, 0xbb, 0x43, 0x99, 0x94, 0xee, 0xd4, 0xdd, 0x69, 0xad, 0xbc, 0x02, 0x8e, 0x26,
	0x5e, 0x3c, 0x92, 0xf8, 0x66, 0x38, 0x12, 0x4f, 0x86, 0x03, 0x31, 0xf0, 0x46, 0xcc, 0xce, 0xb6,
	0xfc, 0x29, 0xd4, 0x78, 0xf0, 0xb4, 0x3b, 0xcf, 0xf7, 0x33, 0xdf, 0x7d, 0x9e, 0xef, 0x6c, 0x06,
	0x14, 0x3d, 0x12, 0x08, 0x6e, 0xee, 0xb1, 0x8f, 0x2d, 0xe6, 0x47, 0x82, 0xd4, 0x59, 0x50, 0x33,
	0xdb, 0x4b, 0xd7, 0x0b, 0x46, 0x33, 0xe4, 0x82, 0xc3, 0x09, 0xc9, 0x1a, 0xd7, 0xa5, 0xf6, 0x52,
	0xfe, 0x5e, 0x8d, 0xd7, 0xb8, 0x44, 0xcc, 0xf8, 0x2d, 0xa1, 0xf3, 0x0f, 0x3c, 0x1e, 0x35, 0x78,
	0x84, 0x13, 0x21, 0x59, 0x24, 0xd2, 0x4c, 0x1d, 0x0c, 0x6f, 0x92, 0x90, 0x34, 0x22, 0xb8, 0x04,
	0xee, 0x07, 0xb4, 0x23, 0x30, 0x6d, 0x72, 0x6f, 0x17, 0x7b, 0xbb, 0xad, 0xa0, 0x8e, 0x23, 0xb6,
	0x4f, 0x73, 0xea, 0x94, 0x3a, 0x9f, 0x41, 0x30, 0x16, 0xed, 0x58, 0x2b, 0xc5, 0x52, 0x99, 0xed,
	0x53, 0x38, 0x0f, 0xb4, 0x06, 0xe9, 0xe0, 0x26, 0x61, 0x21, 0xf5, 0x93, 0x2d, 0xb9, 0x94, 0xa4,
	0xb3, 0x0d, 0xd2, 0xd9, 0x94, 0x65, 0x49, 0x2f, 0x67, 0xbe, 0x1d, 0x16, 0x94, 0x99, 0x1f, 0x2a,
	0x18, 0x92, 0x6b, 0x98, 0x05, 0x29, 0xe6, 0x77, 0x9d, 0x53, 0xcc, 0x87, 0x08, 0x8c, 0x0b, 0x5e,
	0xa7, 0x01, 0x26, 0x0d, 0xde, 0x0a, 0x84, 0x74, 0x19, 0x5d, 0x31, 0x8f, 0x4e, 0x0b, 0xca, 0xc9,
	0x69, 0x61, 0xae, 0xc6, 0xc4, 0x6e, 0x6b, 0xdb, 0xf0, 0x78, 0xa3, 0xdb, 0x7d, 0xf7, 0xb1, 0x18,
	0xf9, 0x75, 0x53, 0x7c, 0x6e, 0xd2, 0xc8, 0x28, 0x71, 0x16, 0xa0, 0x31, 0x69, 0x62, 0x49, 0x0f,
	0x38, 0x0d, 0xc6, 0x59, 0x10, 0xb5, 0x42, 0x12, 0x78, 0x14, 0x33, 0x3f, 0x97, 0x96, 0x5f, 0x1b,
	0xbb, 0xa8, 0x39, 0x3e, 0x7c, 0x09, 0x86, 0x22, 0x41, 0x04, 0xcd, 0x65, 0xa6, 0xd4, 0xf9, 0xec,
	0xd3, 0x19, 0xe3, 0xf6, 0x58, 0x8d, 0x64, 0xe4, 0x98, 0x44, 0xc9, 0x86, 0xe5, 0x91, 0x83, 0xc3,
	0x82, 0x22, 0x87, 0x3a, 0x49, 0x81, 0x51, 0xa7, 0xe7, 0x79, 0x63, 0xb0, 0x05, 0x70, 0xa7, 0x4d,
	0xf6, 0x98, 0x4f, 0x04, 0x0f, 0x31, 0xf1, 0xfd, 0x90, 0x46, 0x51, 0x32, 0x1d, 0xd2, 0x2e, 0x04,
	0x2b, 0xa9, 0xc3, 0x27, 0x40, 0x6b, 0x86, 0xbc, 0xcd, 0x7c, 0x7a, 0xc9, 0xa6, 0x25, 0xfb, 0x7f,
	0xaf, 0xde, 0x43, 0xfb, 0x03, 0xcb, 0xfc, 0x83, 0xc0, 0x1c, 0x30, 0xb2, 0x43, 0x29, 0x0e, 0xe3,
	0x40, 0x86, 0xa4, 0x9f, 0xd1, 0xf5, 0x9b, 0xfd, 0x0b, 0xbf, 0x55, 0xea, 0xa1, 0xff, 0x76, 0x28,
	0x45, 0x44, 0x50, 0xf8, 0xaa, 0x17, 0xec, 0xb0, 0x0c, 0x76, 0x76, 0x50, 0xb0, 0x17, 0xc1, 0xdd,
	0x1e, 0x6e, 0xf1, 0xab, 0x0a, 0xc0, 0x65, 0xf8, 0x70, 0x12, 0xdc, 0x2d, 0xad, 0x55, 0xdd, 0x75,
	0x5c, 0xae, 0x58, 0x15, 0x1b, 0x6f, 0x5a, 0x0e, 0x72, 0xdc, 0x37, 0x9a, 0x02, 0x27, 0x00, 0xec,
	0x17, 0xec, 0x55, 0x4d, 0x85, 0x73, 0xe0, 0xd1, 0xd5, 0x7a, 0xd5, 0xed, 0x6e, 0xc1, 0xaf, 0xdf,
	0x22, 0x8c, 0xec, 0x9e, 0x41, 0x0a, 0x3e, 0x06, 0xd3, 0x83, 0xc1, 0xaa, 0x5b, 0xae, 0x58, 0xeb,
	0xb6, 0x96, 0xce, 0x67, 0x0e, 0xbe, 0xeb, 0x4a, 0xf1, 0x48, 0x05, 0xd9, 0xeb, 0x9d, 0xc3, 0x87,
	0x60, 0xd2, 0x71, 0xcb, 0x55, 0x64, 0xb9, 0x25, 0xfb, 0x46, 0x77, 0x79, 0x30, 0x71, 0x9b, 0x28,
	0x3b, 0x5c, 0x00, 0x73, 0xfd, 0xda, 0xe0, 0x2e, 0x8b, 0x60, 0xf6, 0xcf, 0xf0, 0x96, 0x53, 0x59,
	0x5b, 0x45, 0xd6, 0x96, 0x96, 0x86, 0x3a, 0xc8, 0xf7, 0xb3, 0xef, 0xab, 0x1b, 0xae, 0x8d, 0xac,
	0x95, 0x0d, 0x5b, 0xcb, 0x24, 0xa3, 0xac, 0xbc, 0x3b, 0x3a, 0xd3, 0xd5, 0xe3, 0x33, 0x5d, 0xfd,
	0x75, 0xa6, 0xab, 0x5f, 0xce, 0x75, 0xe5, 0xf8, 0x5c, 0x57, 0x7e, 0x9e, 0xeb, 0xca, 0x87, 0x17,
	0x57, 0xce, 0xbc, 0x14, 0x9f, 0xde, 0xa2, 0x4b, 0xc5, 0x27, 0x1e, 0xd6, 0x93, 0x95, 0xd9, 0x7e,
	0x6e, 0x76, 0xfa, 0x2e, 0x2b, 0xf9, 0x23, 0x6c, 0x0f, 0xcb, 0x9b, 0xe5, 0xd9, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x11, 0x67, 0x4a, 0xcb, 0xd0, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPairedChunk != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.MaxPairedChunk))
		i--
		dAtA[i] = 0x10
	}
	if m.NextEpochChunkSize != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.NextEpochChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.InsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.InsuranceId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Insurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextEpochChunkSize != 0 {
		n += 1 + sovLiquidstaking(uint64(m.NextEpochChunkSize))
	}
	if m.MaxPairedChunk != 0 {
		n += 1 + sovLiquidstaking(uint64(m.MaxPairedChunk))
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.InsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.InsuranceId))
	}
	if m.State != 0 {
		n += 1 + sovLiquidstaking(uint64(m.State))
	}
	return n
}

func (m *Insurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.State != 0 {
		n += 1 + sovLiquidstaking(uint64(m.State))
	}
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochChunkSize", wireType)
			}
			m.NextEpochChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochChunkSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPairedChunk", wireType)
			}
			m.MaxPairedChunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPairedChunk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceId", wireType)
			}
			m.InsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ChunkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= InsuranceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
