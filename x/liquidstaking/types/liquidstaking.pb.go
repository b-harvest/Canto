// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/liquidstaking.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChunkStatus defines the status of the chunk.
type ChunkStatus int32

const (
	CHUNK_STATUS_UNSPECIFIED ChunkStatus = 0
	// Default status of a chunk when a msgServer receives MsgLiquidStake.
	// This status indicates that the chunk is ready to be paired
	// with an insurance.
	CHUNK_STATUS_PAIRING ChunkStatus = 1
	// This status indicates that the chunk is paired with an insurance
	// which has the lowest fee rate.
	CHUNK_STATUS_PAIRED ChunkStatus = 2
	// For various reasons, the insurance paired to Chunk can be un-paired.
	// At this time, if there is no insurance candidate,
	// a chunk enters this status.
	CHUNK_STATUS_UNPAIRING_FOR_REPAIRING ChunkStatus = 3
	// When a delegator(= liquid staker) sends a MsgLiquidUnstake, the last ranked
	// paired chunk enters this status and waits until the un-bonding period times
	// out.
	CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE ChunkStatus = 4
)

var ChunkStatus_name = map[int32]string{
	0: "CHUNK_STATUS_UNSPECIFIED",
	1: "CHUNK_STATUS_PAIRING",
	2: "CHUNK_STATUS_PAIRED",
	3: "CHUNK_STATUS_UNPAIRING_FOR_REPAIRING",
	4: "CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE",
}

var ChunkStatus_value = map[string]int32{
	"CHUNK_STATUS_UNSPECIFIED":             0,
	"CHUNK_STATUS_PAIRING":                 1,
	"CHUNK_STATUS_PAIRED":                  2,
	"CHUNK_STATUS_UNPAIRING_FOR_REPAIRING": 3,
	"CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE":   4,
}

func (x ChunkStatus) String() string {
	return proto.EnumName(ChunkStatus_name, int32(x))
}

func (ChunkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}

// InsuranceStatus defines the status of the insurance.
type InsuranceStatus int32

const (
	INSURANCE_STATUS_UNSPECIFIED InsuranceStatus = 0
	// Default status of an insurance when a msgServer receives
	// MsgInsuranceProvide. This status indicates that
	// the insurance is ready to be paired with a chunk.
	INSURANCE_STATUS_PAIRING InsuranceStatus = 1
	// This status indicates that the insurance is paired with a chunk.
	// While the insurance is in this status, it serves as a form of protection
	// for the chunk by insuring it against unexpected loss that may occur due to
	// validator slashing.
	INSURANCE_STATUS_PAIRED InsuranceStatus = 2
	// For various reasons, the insurance paired to Chunk can enters this status.
	// The insurance in this status wait until
	// the paired chunk's un-bonding period times out.
	INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING InsuranceStatus = 3
	// Insurance enters this status when msgServer receives MsgWithdrawInsurance.
	// The insurance waits until the paired chunk's un-bonding period times out.
	INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW InsuranceStatus = 4
	// Every begin block, the module checks all insurances have enough balance to
	// cover slash. If not, the insurance enters this status. Insurance provider
	// can re-fill token amount of the insurance by sending MsgRefillInsurance or
	// cancel the insurance by sending MsgCancelInsuranceProvide.
	INSURANCE_STATUS_VULNERABLE InsuranceStatus = 5
)

var InsuranceStatus_name = map[int32]string{
	0: "INSURANCE_STATUS_UNSPECIFIED",
	1: "INSURANCE_STATUS_PAIRING",
	2: "INSURANCE_STATUS_PAIRED",
	3: "INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING",
	4: "INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW",
	5: "INSURANCE_STATUS_VULNERABLE",
}

var InsuranceStatus_value = map[string]int32{
	"INSURANCE_STATUS_UNSPECIFIED":             0,
	"INSURANCE_STATUS_PAIRING":                 1,
	"INSURANCE_STATUS_PAIRED":                  2,
	"INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING": 3,
	"INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW":  4,
	"INSURANCE_STATUS_VULNERABLE":              5,
}

func (x InsuranceStatus) String() string {
	return proto.EnumName(InsuranceStatus_name, int32(x))
}

func (InsuranceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}

// Epoch defines the epoch of the module.
type Epoch struct {
	CurrentNumber       uint64        `protobuf:"varint,1,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	EpochStartTime      time.Time     `protobuf:"bytes,2,opt,name=epoch_start_time,json=epochStartTime,proto3,stdtime" json:"epoch_start_time"`
	EpochDuration       time.Duration `protobuf:"bytes,3,opt,name=epoch_duration,json=epochDuration,proto3,stdduration" json:"epoch_duration"`
	EpochStartHeight    int64         `protobuf:"varint,4,opt,name=epoch_start_height,json=epochStartHeight,proto3" json:"epoch_start_height,omitempty"`
	EpochChunkSize      uint64        `protobuf:"varint,5,opt,name=epoch_chunk_size,json=epochChunkSize,proto3" json:"epoch_chunk_size,omitempty"`
	EpochMaxPairedChunk uint64        `protobuf:"varint,6,opt,name=epoch_max_paired_chunk,json=epochMaxPairedChunk,proto3" json:"epoch_max_paired_chunk,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetCurrentNumber() uint64 {
	if m != nil {
		return m.CurrentNumber
	}
	return 0
}

func (m *Epoch) GetEpochStartTime() time.Time {
	if m != nil {
		return m.EpochStartTime
	}
	return time.Time{}
}

func (m *Epoch) GetEpochDuration() time.Duration {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

func (m *Epoch) GetEpochStartHeight() int64 {
	if m != nil {
		return m.EpochStartHeight
	}
	return 0
}

func (m *Epoch) GetEpochChunkSize() uint64 {
	if m != nil {
		return m.EpochChunkSize
	}
	return 0
}

func (m *Epoch) GetEpochMaxPairedChunk() uint64 {
	if m != nil {
		return m.EpochMaxPairedChunk
	}
	return 0
}

// Params defines the parameters for the module.
type Params struct {
	// next_epoch_chunk_size is the size of chunk.
	// This param is managed by gov module, but the change
	// will always applied in the next epoch for safety.
	NextEpochChunkSize uint64 `protobuf:"varint,1,opt,name=next_epoch_chunk_size,json=nextEpochChunkSize,proto3" json:"next_epoch_chunk_size,omitempty"`
	// next_epoch_max_paired_chunk is the maximum number of chunks
	// that can be paired with an insurance.
	NextEpochMaxPairedChunk uint64 `protobuf:"varint,2,opt,name=next_epoch_max_paired_chunk,json=nextEpochMaxPairedChunk,proto3" json:"next_epoch_max_paired_chunk,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNextEpochChunkSize() uint64 {
	if m != nil {
		return m.NextEpochChunkSize
	}
	return 0
}

func (m *Params) GetNextEpochMaxPairedChunk() uint64 {
	if m != nil {
		return m.NextEpochMaxPairedChunk
	}
	return 0
}

// Chunk defines the chunk of the module.
type Chunk struct {
	// Id of the chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id of Paired insurance, 0 means no insurance
	InsuranceId uint64 `protobuf:"varint,2,opt,name=insurance_id,json=insuranceId,proto3" json:"insurance_id,omitempty"`
	// Status of the chunk
	Status ChunkStatus `protobuf:"varint,3,opt,name=status,proto3,enum=canto.liquidstaking.v1.ChunkStatus" json:"status,omitempty"`
}

func (m *Chunk) Reset()      { *m = Chunk{} }
func (*Chunk) ProtoMessage() {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{2}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

// Insurance defines the insurance of the module.
type Insurance struct {
	// Id of the insurance
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Address of the insurance provider
	ProviderAddress string `protobuf:"bytes,3,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	// Amount of native token to guard slashing
	Amount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	// Fee rate of the insurance
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	// Id of Paired chunk, 0 means no chunk
	ChunkId uint64 `protobuf:"varint,6,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Status of the insurance
	Status InsuranceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=canto.liquidstaking.v1.InsuranceStatus" json:"status,omitempty"`
}

func (m *Insurance) Reset()      { *m = Insurance{} }
func (*Insurance) ProtoMessage() {}
func (*Insurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{3}
}
func (m *Insurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Insurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Insurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insurance.Merge(m, src)
}
func (m *Insurance) XXX_Size() int {
	return m.Size()
}
func (m *Insurance) XXX_DiscardUnknown() {
	xxx_messageInfo_Insurance.DiscardUnknown(m)
}

var xxx_messageInfo_Insurance proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("canto.liquidstaking.v1.ChunkStatus", ChunkStatus_name, ChunkStatus_value)
	proto.RegisterEnum("canto.liquidstaking.v1.InsuranceStatus", InsuranceStatus_name, InsuranceStatus_value)
	proto.RegisterType((*Epoch)(nil), "canto.liquidstaking.v1.Epoch")
	proto.RegisterType((*Params)(nil), "canto.liquidstaking.v1.Params")
	proto.RegisterType((*Chunk)(nil), "canto.liquidstaking.v1.Chunk")
	proto.RegisterType((*Insurance)(nil), "canto.liquidstaking.v1.Insurance")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/liquidstaking.proto", fileDescriptor_d5ab11aad71f7b33)
}

var fileDescriptor_d5ab11aad71f7b33 = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6f, 0xdb, 0x54,
	0x14, 0x8f, 0xd3, 0x34, 0x6d, 0x4f, 0x59, 0x67, 0xee, 0xc6, 0xea, 0x7e, 0x28, 0x29, 0x05, 0xd6,
	0xd0, 0x6d, 0xb6, 0xba, 0x49, 0x20, 0x0d, 0x24, 0x94, 0x0f, 0x6f, 0x35, 0x1b, 0xa6, 0x38, 0x09,
	0x93, 0x78, 0xb1, 0x6e, 0xed, 0xdb, 0xe4, 0xaa, 0xb5, 0x6f, 0xb0, 0xaf, 0x43, 0xd9, 0x0b, 0xe2,
	0x6d, 0x8f, 0x7b, 0xdc, 0xe3, 0x24, 0xfe, 0x07, 0xfe, 0x86, 0x3d, 0xee, 0x0d, 0xc4, 0xc3, 0x40,
	0xed, 0x33, 0x12, 0x7f, 0x02, 0xf2, 0xbd, 0x76, 0xda, 0x34, 0x29, 0xec, 0xa9, 0x3d, 0xe7, 0xf7,
	0x71, 0x3e, 0xee, 0x49, 0x02, 0xdb, 0x1e, 0x0e, 0x39, 0x33, 0x8e, 0xe8, 0xf7, 0x09, 0xf5, 0x63,
	0x8e, 0x0f, 0x69, 0xd8, 0x33, 0x86, 0x3b, 0xe3, 0x09, 0x7d, 0x10, 0x31, 0xce, 0xd0, 0x0d, 0xc1,
	0xd5, 0xc7, 0xa1, 0xe1, 0xce, 0xea, 0xf5, 0x1e, 0xeb, 0x31, 0x41, 0x31, 0xd2, 0xff, 0x24, 0x7b,
	0xb5, 0xd2, 0x63, 0xac, 0x77, 0x44, 0x0c, 0x11, 0xed, 0x27, 0x07, 0x86, 0x9f, 0x44, 0x98, 0x53,
	0x16, 0x66, 0x78, 0xf5, 0x22, 0xce, 0x69, 0x40, 0x62, 0x8e, 0x83, 0x41, 0x46, 0x58, 0xf1, 0x58,
	0x1c, 0xb0, 0xd8, 0x95, 0xce, 0x32, 0x90, 0xd0, 0xe6, 0x6f, 0x45, 0x98, 0x35, 0x07, 0xcc, 0xeb,
	0xa3, 0x8f, 0x60, 0xc9, 0x4b, 0xa2, 0x88, 0x84, 0xdc, 0x0d, 0x93, 0x60, 0x9f, 0x44, 0x9a, 0xb2,
	0xa1, 0xd4, 0x4a, 0xce, 0x95, 0x2c, 0x6b, 0x8b, 0x24, 0xb2, 0x41, 0x25, 0x29, 0xdf, 0x8d, 0x39,
	0x8e, 0xb8, 0x9b, 0x96, 0xd2, 0x8a, 0x1b, 0x4a, 0x6d, 0xf1, 0xee, 0xaa, 0x2e, 0xfb, 0xd0, 0xf3,
	0x3e, 0xf4, 0x4e, 0xde, 0x47, 0x63, 0xfe, 0xd5, 0x9b, 0x6a, 0xe1, 0xf9, 0x9f, 0x55, 0xc5, 0x59,
	0x12, 0xea, 0x76, 0x2a, 0x4e, 0x61, 0xf4, 0x25, 0xc8, 0x8c, 0x9b, 0x0f, 0xa5, 0xcd, 0x08, 0xb7,
	0x95, 0x09, 0xb7, 0x56, 0x46, 0x90, 0x66, 0x2f, 0x52, 0xb3, 0x2b, 0x42, 0x9a, 0x03, 0xe8, 0x36,
	0xa0, 0xf3, 0xbd, 0xf5, 0x09, 0xed, 0xf5, 0xb9, 0x56, 0xda, 0x50, 0x6a, 0x33, 0x8e, 0x7a, 0x56,
	0x77, 0x57, 0xe4, 0x51, 0x2d, 0x9f, 0xc4, 0xeb, 0x27, 0xe1, 0xa1, 0x1b, 0xd3, 0xa7, 0x44, 0x9b,
	0x15, 0x23, 0xcb, 0x8e, 0x9a, 0x69, 0xba, 0x4d, 0x9f, 0x12, 0x74, 0x0f, 0x6e, 0x48, 0x66, 0x80,
	0x8f, 0xdd, 0x01, 0xa6, 0x11, 0xf1, 0xa5, 0x48, 0x2b, 0x0b, 0xfe, 0x35, 0x81, 0x7e, 0x85, 0x8f,
	0xf7, 0x04, 0x26, 0x84, 0x9b, 0x3f, 0x41, 0x79, 0x0f, 0x47, 0x38, 0x88, 0xd1, 0x0e, 0xbc, 0x17,
	0x92, 0x63, 0xee, 0x4e, 0x54, 0x93, 0x0b, 0x46, 0x29, 0x68, 0x8e, 0x57, 0xfc, 0x1c, 0xd6, 0xce,
	0x49, 0x26, 0xca, 0x16, 0x85, 0x70, 0x79, 0x24, 0x1c, 0x2f, 0x7d, 0xbf, 0xf4, 0xe2, 0x65, 0xb5,
	0xb0, 0xf9, 0xb3, 0x02, 0xb3, 0x22, 0x46, 0x4b, 0x50, 0xa4, 0x7e, 0x56, 0xad, 0x48, 0x7d, 0xf4,
	0x3e, 0xbc, 0x43, 0xc3, 0x38, 0x89, 0x70, 0xe8, 0x11, 0x97, 0xfa, 0x99, 0xdd, 0xe2, 0x28, 0x67,
	0xf9, 0xe8, 0x33, 0x28, 0xc7, 0x1c, 0xf3, 0x24, 0x16, 0xcf, 0xb1, 0x74, 0xf7, 0x03, 0x7d, 0xfa,
	0xc9, 0xea, 0xb2, 0x67, 0x41, 0x75, 0x32, 0xc9, 0xfd, 0xf9, 0x67, 0x2f, 0xab, 0x05, 0xd1, 0xc3,
	0xdf, 0x45, 0x58, 0xb0, 0x72, 0xdb, 0x89, 0x3e, 0x6e, 0xc1, 0xbb, 0x43, 0x7c, 0x44, 0x7d, 0xcc,
	0x59, 0xe4, 0x62, 0xdf, 0x8f, 0x48, 0x1c, 0x8b, 0x66, 0x16, 0x1c, 0x75, 0x04, 0xd4, 0x65, 0x1e,
	0x7d, 0x0c, 0xea, 0x20, 0x62, 0x43, 0xea, 0x93, 0x33, 0xee, 0x8c, 0xe0, 0x5e, 0xcd, 0xf3, 0x39,
	0xf5, 0x21, 0x94, 0x71, 0xc0, 0x92, 0x50, 0xbe, 0xfd, 0x42, 0xc3, 0x48, 0x0f, 0xe6, 0x8f, 0x37,
	0xd5, 0xad, 0x1e, 0xe5, 0xfd, 0x64, 0x5f, 0xf7, 0x58, 0x90, 0x7d, 0x0a, 0xb2, 0x3f, 0x77, 0x62,
	0xff, 0xd0, 0xe0, 0x3f, 0x0e, 0x48, 0xac, 0x37, 0x19, 0x0d, 0x9d, 0x4c, 0x8e, 0x2c, 0x98, 0x3f,
	0x20, 0xc4, 0x8d, 0x30, 0x97, 0xa7, 0xb1, 0xd0, 0xd0, 0x33, 0xab, 0x9b, 0x6f, 0x61, 0xd5, 0x22,
	0x9e, 0x33, 0x77, 0x40, 0x88, 0x83, 0x39, 0x41, 0x2b, 0x30, 0x2f, 0x5f, 0x9e, 0xfa, 0xd9, 0xd5,
	0xcc, 0x89, 0xd8, 0xf2, 0xd1, 0x17, 0xa3, 0x5d, 0xcf, 0x89, 0x5d, 0x6f, 0x5d, 0xb6, 0xeb, 0xd1,
	0x26, 0x2f, 0xdb, 0xf7, 0xf6, 0xaf, 0x0a, 0x2c, 0x9e, 0x7b, 0x11, 0xb4, 0x0e, 0x5a, 0x73, 0xb7,
	0x6b, 0x3f, 0x72, 0xdb, 0x9d, 0x7a, 0xa7, 0xdb, 0x76, 0xbb, 0x76, 0x7b, 0xcf, 0x6c, 0x5a, 0x0f,
	0x2c, 0xb3, 0xa5, 0x16, 0x90, 0x06, 0xd7, 0xc7, 0xd0, 0xbd, 0xba, 0xe5, 0x58, 0xf6, 0x43, 0x55,
	0x41, 0xcb, 0x70, 0x6d, 0x02, 0x31, 0x5b, 0x6a, 0x11, 0xd5, 0xe0, 0xc3, 0x0b, 0x86, 0x99, 0xc8,
	0x7d, 0xf0, 0xb5, 0xe3, 0x3a, 0x66, 0x6e, 0x31, 0x83, 0x6e, 0xc2, 0xe6, 0x7f, 0x30, 0xbb, 0x76,
	0xbb, 0x53, 0x7f, 0x64, 0xaa, 0xa5, 0xd5, 0xd2, 0xb3, 0x5f, 0x2a, 0x85, 0xed, 0x7f, 0x14, 0xb8,
	0x7a, 0x61, 0x3c, 0xb4, 0x01, 0xeb, 0x96, 0xdd, 0xee, 0x3a, 0x75, 0xbb, 0x69, 0x4e, 0x1f, 0x60,
	0x1d, 0xb4, 0x09, 0xc6, 0xd9, 0x10, 0x6b, 0xb0, 0x3c, 0x15, 0x15, 0x83, 0xdc, 0x86, 0xda, 0x14,
	0xf3, 0xcb, 0x86, 0xb9, 0x05, 0x5b, 0xff, 0xc3, 0x7e, 0x62, 0x75, 0x76, 0x5b, 0x4e, 0xfd, 0x89,
	0x5a, 0x42, 0x55, 0x58, 0x9b, 0x20, 0x7f, 0xdb, 0x7d, 0x6c, 0x9b, 0x4e, 0xbd, 0xf1, 0xd8, 0x54,
	0x67, 0xe5, 0xc8, 0x8d, 0x6f, 0x5e, 0x9d, 0x54, 0x94, 0xd7, 0x27, 0x15, 0xe5, 0xaf, 0x93, 0x8a,
	0xf2, 0xfc, 0xb4, 0x52, 0x78, 0x7d, 0x5a, 0x29, 0xfc, 0x7e, 0x5a, 0x29, 0x7c, 0xf7, 0xe9, 0xb9,
	0xe3, 0x6a, 0xa6, 0xa7, 0x70, 0xc7, 0x26, 0xfc, 0x07, 0x16, 0x1d, 0xca, 0xc8, 0x18, 0x7e, 0x62,
	0x1c, 0x5f, 0xf8, 0xa1, 0x11, 0x17, 0xb7, 0x5f, 0x16, 0x5f, 0x96, 0xf7, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x43, 0x50, 0x07, 0xac, 0x8c, 0x06, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochMaxPairedChunk != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochMaxPairedChunk))
		i--
		dAtA[i] = 0x30
	}
	if m.EpochChunkSize != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochChunkSize))
		i--
		dAtA[i] = 0x28
	}
	if m.EpochStartHeight != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochStartHeight))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EpochDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EpochStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EpochStartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.CurrentNumber != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.CurrentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextEpochMaxPairedChunk != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.NextEpochMaxPairedChunk))
		i--
		dAtA[i] = 0x10
	}
	if m.NextEpochChunkSize != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.NextEpochChunkSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.InsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.InsuranceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Insurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentNumber != 0 {
		n += 1 + sovLiquidstaking(uint64(m.CurrentNumber))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EpochStartTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration)
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.EpochStartHeight != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochStartHeight))
	}
	if m.EpochChunkSize != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochChunkSize))
	}
	if m.EpochMaxPairedChunk != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochMaxPairedChunk))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextEpochChunkSize != 0 {
		n += 1 + sovLiquidstaking(uint64(m.NextEpochChunkSize))
	}
	if m.NextEpochMaxPairedChunk != 0 {
		n += 1 + sovLiquidstaking(uint64(m.NextEpochMaxPairedChunk))
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	if m.InsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.InsuranceId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *Insurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			m.CurrentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EpochStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EpochDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartHeight", wireType)
			}
			m.EpochStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochChunkSize", wireType)
			}
			m.EpochChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochChunkSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMaxPairedChunk", wireType)
			}
			m.EpochMaxPairedChunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochMaxPairedChunk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochChunkSize", wireType)
			}
			m.NextEpochChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochChunkSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochMaxPairedChunk", wireType)
			}
			m.NextEpochMaxPairedChunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochMaxPairedChunk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceId", wireType)
			}
			m.InsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChunkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InsuranceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
