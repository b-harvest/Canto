// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/liquidstaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TBD
type LiquidValidatorStatus int32

const (
	// TBD
	LIQUID_VALIDATOR_STATUS_UNSPECIFIED LiquidValidatorStatus = 0
	// TBD
	LIQUID_VALIDATOR_STATUS_ACTIVE LiquidValidatorStatus = 1
	// TBD
	LIQUID_VALIDATOR_STATUS_INACTIVE LiquidValidatorStatus = 2
)

var LiquidValidatorStatus_name = map[int32]string{
	0: "LIQUID_VALIDATOR_STATUS_UNSPECIFIED",
	1: "LIQUID_VALIDATOR_STATUS_ACTIVE",
	2: "LIQUID_VALIDATOR_STATUS_INACTIVE",
}

var LiquidValidatorStatus_value = map[string]int32{
	"LIQUID_VALIDATOR_STATUS_UNSPECIFIED": 0,
	"LIQUID_VALIDATOR_STATUS_ACTIVE":      1,
	"LIQUID_VALIDATOR_STATUS_INACTIVE":    2,
}

func (x LiquidValidatorStatus) String() string {
	return proto.EnumName(LiquidValidatorStatus_name, int32(x))
}

func (LiquidValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}

// TBD
type InsuranceBidStatus int32

const (
	// TBD
	INSURANCE_BID_STATUS_TOBE_UNSPECIFIED InsuranceBidStatus = 0
	// TBD
	INSURANCE_BID_STATUS_TOBE_BONDED InsuranceBidStatus = 1
	// TBD
	INSURANCE_BID_STATUS_BONDED InsuranceBidStatus = 2
	// TBD
	INSURANCE_BID_STATUS_UNBONDING InsuranceBidStatus = 3
)

var InsuranceBidStatus_name = map[int32]string{
	0: "INSURANCE_BID_STATUS_TOBE_UNSPECIFIED",
	1: "INSURANCE_BID_STATUS_TOBE_BONDED",
	2: "INSURANCE_BID_STATUS_BONDED",
	3: "INSURANCE_BID_STATUS_UNBONDING",
}

var InsuranceBidStatus_value = map[string]int32{
	"INSURANCE_BID_STATUS_TOBE_UNSPECIFIED": 0,
	"INSURANCE_BID_STATUS_TOBE_BONDED":      1,
	"INSURANCE_BID_STATUS_BONDED":           2,
	"INSURANCE_BID_STATUS_UNBONDING":        3,
}

func (x InsuranceBidStatus) String() string {
	return proto.EnumName(InsuranceBidStatus_name, int32(x))
}

func (InsuranceBidStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}

type Epoch struct {
	Identifier              string        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StartTime               time.Time     `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	Duration                time.Duration `protobuf:"bytes,3,opt,name=duration,proto3,stdduration" json:"duration"`
	CurrentEpoch            int64         `protobuf:"varint,4,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	CurrentEpochStartTime   time.Time     `protobuf:"bytes,5,opt,name=current_epoch_start_time,json=currentEpochStartTime,proto3,stdtime" json:"current_epoch_start_time"`
	EpochCountingStarted    bool          `protobuf:"varint,6,opt,name=epoch_counting_started,json=epochCountingStarted,proto3" json:"epoch_counting_started,omitempty"`
	CurrentEpochStartHeight int64         `protobuf:"varint,7,opt,name=current_epoch_start_height,json=currentEpochStartHeight,proto3" json:"current_epoch_start_height,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Epoch) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Epoch) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Epoch) GetCurrentEpoch() int64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *Epoch) GetCurrentEpochStartTime() time.Time {
	if m != nil {
		return m.CurrentEpochStartTime
	}
	return time.Time{}
}

func (m *Epoch) GetEpochCountingStarted() bool {
	if m != nil {
		return m.EpochCountingStarted
	}
	return false
}

func (m *Epoch) GetCurrentEpochStartHeight() int64 {
	if m != nil {
		return m.CurrentEpochStartHeight
	}
	return 0
}

type LiquidValidator struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *LiquidValidator) Reset()         { *m = LiquidValidator{} }
func (m *LiquidValidator) String() string { return proto.CompactTextString(m) }
func (*LiquidValidator) ProtoMessage()    {}
func (*LiquidValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}
func (m *LiquidValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidValidator.Merge(m, src)
}
func (m *LiquidValidator) XXX_Size() int {
	return m.Size()
}
func (m *LiquidValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidValidator.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidValidator proto.InternalMessageInfo

// LiquidValidatorState is type LiquidValidator with state added to return to
// query results.
type LiquidValidatorState struct {
	Val               LiquidValidator                        `protobuf:"bytes,1,opt,name=val,proto3" json:"val"`
	CommissionFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=commission_fee_rate,json=commissionFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_fee_rate"`
	Status            LiquidValidatorStatus                  `protobuf:"varint,3,opt,name=status,proto3,enum=canto.liquidstaking.v1.LiquidValidatorStatus" json:"status,omitempty"`
}

func (m *LiquidValidatorState) Reset()         { *m = LiquidValidatorState{} }
func (m *LiquidValidatorState) String() string { return proto.CompactTextString(m) }
func (*LiquidValidatorState) ProtoMessage()    {}
func (*LiquidValidatorState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{2}
}
func (m *LiquidValidatorState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidValidatorState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidValidatorState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidValidatorState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidValidatorState.Merge(m, src)
}
func (m *LiquidValidatorState) XXX_Size() int {
	return m.Size()
}
func (m *LiquidValidatorState) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidValidatorState.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidValidatorState proto.InternalMessageInfo

type LiquidStakingState struct {
	MintRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=mint_rate,json=mintRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_rate"`
}

func (m *LiquidStakingState) Reset()         { *m = LiquidStakingState{} }
func (m *LiquidStakingState) String() string { return proto.CompactTextString(m) }
func (*LiquidStakingState) ProtoMessage()    {}
func (*LiquidStakingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{3}
}
func (m *LiquidStakingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidStakingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidStakingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidStakingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidStakingState.Merge(m, src)
}
func (m *LiquidStakingState) XXX_Size() int {
	return m.Size()
}
func (m *LiquidStakingState) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidStakingState.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidStakingState proto.InternalMessageInfo

type ChunkBondRequest struct {
	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address     string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	TokenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount"`
}

func (m *ChunkBondRequest) Reset()         { *m = ChunkBondRequest{} }
func (m *ChunkBondRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkBondRequest) ProtoMessage()    {}
func (*ChunkBondRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{4}
}
func (m *ChunkBondRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkBondRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkBondRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkBondRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkBondRequest.Merge(m, src)
}
func (m *ChunkBondRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChunkBondRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkBondRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkBondRequest proto.InternalMessageInfo

func (m *ChunkBondRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChunkBondRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ChunkUnbondRequest struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NumChunkUnbond uint64 `protobuf:"varint,3,opt,name=num_chunk_unbond,json=numChunkUnbond,proto3" json:"num_chunk_unbond,omitempty"`
}

func (m *ChunkUnbondRequest) Reset()         { *m = ChunkUnbondRequest{} }
func (m *ChunkUnbondRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkUnbondRequest) ProtoMessage()    {}
func (*ChunkUnbondRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{5}
}
func (m *ChunkUnbondRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkUnbondRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkUnbondRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkUnbondRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkUnbondRequest.Merge(m, src)
}
func (m *ChunkUnbondRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChunkUnbondRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkUnbondRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkUnbondRequest proto.InternalMessageInfo

func (m *ChunkUnbondRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChunkUnbondRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChunkUnbondRequest) GetNumChunkUnbond() uint64 {
	if m != nil {
		return m.NumChunkUnbond
	}
	return 0
}

type InsuranceBid struct {
	Id                       uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidatorAddress         string                                 `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	InsuranceProviderAddress string                                 `protobuf:"bytes,3,opt,name=insurance_provider_address,json=insuranceProviderAddress,proto3" json:"insurance_provider_address,omitempty"`
	InsuranceAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=insurance_amount,json=insuranceAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"insurance_amount"`
	InsuranceFeeRate         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=insurance_fee_rate,json=insuranceFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"insurance_fee_rate"`
	Status                   InsuranceBidStatus                     `protobuf:"varint,6,opt,name=status,proto3,enum=canto.liquidstaking.v1.InsuranceBidStatus" json:"status,omitempty"`
}

func (m *InsuranceBid) Reset()         { *m = InsuranceBid{} }
func (m *InsuranceBid) String() string { return proto.CompactTextString(m) }
func (*InsuranceBid) ProtoMessage()    {}
func (*InsuranceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{6}
}
func (m *InsuranceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsuranceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsuranceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsuranceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsuranceBid.Merge(m, src)
}
func (m *InsuranceBid) XXX_Size() int {
	return m.Size()
}
func (m *InsuranceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_InsuranceBid.DiscardUnknown(m)
}

var xxx_messageInfo_InsuranceBid proto.InternalMessageInfo

func (m *InsuranceBid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InsuranceBid) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *InsuranceBid) GetInsuranceProviderAddress() string {
	if m != nil {
		return m.InsuranceProviderAddress
	}
	return ""
}

func (m *InsuranceBid) GetStatus() InsuranceBidStatus {
	if m != nil {
		return m.Status
	}
	return INSURANCE_BID_STATUS_TOBE_UNSPECIFIED
}

type InsuranceUnbondRequest struct {
	// address of the insurance provider for the chunk
	InsuranceProviderAddress string `protobuf:"bytes,1,opt,name=insurance_provider_address,json=insuranceProviderAddress,proto3" json:"insurance_provider_address,omitempty"`
	AliveChunkId             uint64 `protobuf:"varint,2,opt,name=alive_chunk_id,json=aliveChunkId,proto3" json:"alive_chunk_id,omitempty"`
}

func (m *InsuranceUnbondRequest) Reset()         { *m = InsuranceUnbondRequest{} }
func (m *InsuranceUnbondRequest) String() string { return proto.CompactTextString(m) }
func (*InsuranceUnbondRequest) ProtoMessage()    {}
func (*InsuranceUnbondRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{7}
}
func (m *InsuranceUnbondRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsuranceUnbondRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsuranceUnbondRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsuranceUnbondRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsuranceUnbondRequest.Merge(m, src)
}
func (m *InsuranceUnbondRequest) XXX_Size() int {
	return m.Size()
}
func (m *InsuranceUnbondRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsuranceUnbondRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsuranceUnbondRequest proto.InternalMessageInfo

func (m *InsuranceUnbondRequest) GetInsuranceProviderAddress() string {
	if m != nil {
		return m.InsuranceProviderAddress
	}
	return ""
}

func (m *InsuranceUnbondRequest) GetAliveChunkId() uint64 {
	if m != nil {
		return m.AliveChunkId
	}
	return 0
}

type AliveChunk struct {
	// id of alive chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address of the validator that the chunk is staked to
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// address of the insurance provider for the chunk
	InsuranceProviderAddress string `protobuf:"bytes,3,opt,name=insurance_provider_address,json=insuranceProviderAddress,proto3" json:"insurance_provider_address,omitempty"`
	// amount of the native token in the chunk
	TokenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount"`
	// amount of the native tokne for insurance
	InsuranceAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=insurance_amount,json=insuranceAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"insurance_amount"`
	// insurance fee rate of the chunk
	InsuranceFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=insurance_fee_rate,json=insuranceFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"insurance_fee_rate"`
}

func (m *AliveChunk) Reset()         { *m = AliveChunk{} }
func (m *AliveChunk) String() string { return proto.CompactTextString(m) }
func (*AliveChunk) ProtoMessage()    {}
func (*AliveChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{8}
}
func (m *AliveChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliveChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliveChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliveChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliveChunk.Merge(m, src)
}
func (m *AliveChunk) XXX_Size() int {
	return m.Size()
}
func (m *AliveChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_AliveChunk.DiscardUnknown(m)
}

var xxx_messageInfo_AliveChunk proto.InternalMessageInfo

func (m *AliveChunk) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AliveChunk) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *AliveChunk) GetInsuranceProviderAddress() string {
	if m != nil {
		return m.InsuranceProviderAddress
	}
	return ""
}

type UnbondingChunk struct {
	// id of unbonding chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address of the validator that the chunk is staked to
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// address of the insurance provider for the chunk
	InsuranceProviderAddress string `protobuf:"bytes,3,opt,name=insurance_provider_address,json=insuranceProviderAddress,proto3" json:"insurance_provider_address,omitempty"`
	// amount of the native token in the chunk
	TokenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount"`
	// amount of the native tokne for insurance
	InsuranceAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=insurance_amount,json=insuranceAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"insurance_amount"`
}

func (m *UnbondingChunk) Reset()         { *m = UnbondingChunk{} }
func (m *UnbondingChunk) String() string { return proto.CompactTextString(m) }
func (*UnbondingChunk) ProtoMessage()    {}
func (*UnbondingChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{9}
}
func (m *UnbondingChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingChunk.Merge(m, src)
}
func (m *UnbondingChunk) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingChunk.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingChunk proto.InternalMessageInfo

func (m *UnbondingChunk) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UnbondingChunk) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *UnbondingChunk) GetInsuranceProviderAddress() string {
	if m != nil {
		return m.InsuranceProviderAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("canto.liquidstaking.v1.LiquidValidatorStatus", LiquidValidatorStatus_name, LiquidValidatorStatus_value)
	proto.RegisterEnum("canto.liquidstaking.v1.InsuranceBidStatus", InsuranceBidStatus_name, InsuranceBidStatus_value)
	proto.RegisterType((*Epoch)(nil), "canto.liquidstaking.v1.Epoch")
	proto.RegisterType((*LiquidValidator)(nil), "canto.liquidstaking.v1.LiquidValidator")
	proto.RegisterType((*LiquidValidatorState)(nil), "canto.liquidstaking.v1.LiquidValidatorState")
	proto.RegisterType((*LiquidStakingState)(nil), "canto.liquidstaking.v1.LiquidStakingState")
	proto.RegisterType((*ChunkBondRequest)(nil), "canto.liquidstaking.v1.ChunkBondRequest")
	proto.RegisterType((*ChunkUnbondRequest)(nil), "canto.liquidstaking.v1.ChunkUnbondRequest")
	proto.RegisterType((*InsuranceBid)(nil), "canto.liquidstaking.v1.InsuranceBid")
	proto.RegisterType((*InsuranceUnbondRequest)(nil), "canto.liquidstaking.v1.InsuranceUnbondRequest")
	proto.RegisterType((*AliveChunk)(nil), "canto.liquidstaking.v1.AliveChunk")
	proto.RegisterType((*UnbondingChunk)(nil), "canto.liquidstaking.v1.UnbondingChunk")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/liquidstaking.proto", fileDescriptor_d5ab11aad71f7b33)
}

var fileDescriptor_d5ab11aad71f7b33 = []byte{
	// 1026 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0xb4, 0xdb, 0xbe, 0x96, 0x36, 0x3b, 0x74, 0x4b, 0x36, 0x48, 0x4e, 0x94, 0x2d,
	0x6c, 0xb7, 0xa8, 0x89, 0x5a, 0x38, 0x01, 0x12, 0x8a, 0x93, 0x14, 0x2c, 0xaa, 0x74, 0xd7, 0x49,
	0x2a, 0x81, 0x16, 0x2c, 0xc7, 0x9e, 0x26, 0xa3, 0x36, 0x33, 0x5d, 0x7b, 0x1c, 0x40, 0xe2, 0x8c,
	0x7a, 0xa3, 0x12, 0x17, 0x8e, 0x2b, 0xc1, 0x0f, 0xe0, 0xca, 0x3f, 0xd8, 0xe3, 0x1e, 0x11, 0x87,
	0x05, 0xb5, 0x17, 0x7e, 0x06, 0x9a, 0x19, 0x3b, 0x4d, 0xd2, 0x14, 0x68, 0x01, 0x71, 0xe1, 0x14,
	0xcf, 0x7b, 0xdf, 0xfb, 0xfc, 0xcd, 0x7b, 0x9f, 0x27, 0x03, 0x1b, 0xae, 0x43, 0x39, 0x2b, 0x1f,
	0x91, 0x27, 0x21, 0xf1, 0x02, 0xee, 0x1c, 0x12, 0xda, 0x2d, 0x0f, 0xb6, 0xc6, 0x03, 0xa5, 0x63,
	0x9f, 0x71, 0x86, 0x56, 0x25, 0xb6, 0x34, 0x9e, 0x1a, 0x6c, 0xe5, 0x74, 0x97, 0x05, 0x7d, 0x16,
	0x94, 0x3b, 0x4e, 0x80, 0xcb, 0x83, 0xad, 0x0e, 0xe6, 0xce, 0x56, 0xd9, 0x65, 0x84, 0xaa, 0xba,
	0xdc, 0x5d, 0x95, 0xb7, 0xe5, 0xaa, 0xac, 0x16, 0x51, 0x6a, 0xa5, 0xcb, 0xba, 0x4c, 0xc5, 0xc5,
	0x53, 0x14, 0xd5, 0xbb, 0x8c, 0x75, 0x8f, 0x70, 0x59, 0xae, 0x3a, 0xe1, 0x41, 0xd9, 0x0b, 0x7d,
	0x87, 0x13, 0x16, 0x13, 0xe6, 0x27, 0xf3, 0x9c, 0xf4, 0x71, 0xc0, 0x9d, 0xfe, 0xb1, 0x02, 0x14,
	0xbf, 0x4f, 0xc1, 0x4c, 0xfd, 0x98, 0xb9, 0x3d, 0xa4, 0x03, 0x10, 0x0f, 0x53, 0x4e, 0x0e, 0x08,
	0xf6, 0xb3, 0x5a, 0x41, 0x5b, 0x9f, 0xb7, 0x46, 0x22, 0xa8, 0x0a, 0x10, 0x70, 0xc7, 0xe7, 0xb6,
	0xa0, 0xc8, 0x26, 0x0b, 0xda, 0xfa, 0xc2, 0x76, 0xae, 0xa4, 0xf8, 0x4b, 0x31, 0x7f, 0xa9, 0x15,
	0xf3, 0x1b, 0x73, 0xcf, 0x5e, 0xe4, 0x13, 0xa7, 0xbf, 0xe4, 0x35, 0x6b, 0x5e, 0xd6, 0x89, 0x0c,
	0x7a, 0x0f, 0xe6, 0x62, 0x85, 0xd9, 0x94, 0xa4, 0xb8, 0x7b, 0x89, 0xa2, 0x16, 0x01, 0x14, 0xc3,
	0xb7, 0x82, 0x61, 0x58, 0x84, 0xee, 0xc1, 0x4b, 0x6e, 0xe8, 0xfb, 0x98, 0x72, 0x1b, 0x0b, 0xd9,
	0xd9, 0x74, 0x41, 0x5b, 0x4f, 0x59, 0x8b, 0x51, 0x50, 0x6d, 0xe5, 0x13, 0xc8, 0x8e, 0x81, 0xec,
	0x11, 0xe1, 0x33, 0xd7, 0x10, 0x7e, 0x67, 0x94, 0xb5, 0x39, 0xdc, 0xc4, 0x5b, 0xb0, 0xaa, 0x68,
	0x5d, 0x16, 0x52, 0x4e, 0x68, 0x57, 0xf1, 0x63, 0x2f, 0x3b, 0x5b, 0xd0, 0xd6, 0xe7, 0xac, 0x15,
	0x99, 0xad, 0x46, 0xc9, 0xa6, 0xca, 0xa1, 0x77, 0x20, 0x37, 0x4d, 0x54, 0x0f, 0x93, 0x6e, 0x8f,
	0x67, 0x6f, 0xc9, 0x6d, 0xbc, 0x72, 0xe9, 0x85, 0x1f, 0xc8, 0x74, 0x71, 0x07, 0x96, 0x77, 0xa5,
	0x99, 0xf6, 0x9d, 0x23, 0xe2, 0x39, 0x9c, 0xf9, 0xe8, 0x01, 0x64, 0xd8, 0x31, 0xf6, 0xc5, 0xb3,
	0xed, 0x78, 0x9e, 0x8f, 0x83, 0x20, 0x9a, 0xda, 0x72, 0x1c, 0xaf, 0xa8, 0xf0, 0xdb, 0x73, 0x27,
	0x4f, 0xf3, 0x89, 0xdf, 0x9e, 0xe6, 0x13, 0xc5, 0x93, 0x24, 0xac, 0x4c, 0x10, 0x35, 0xb9, 0xc3,
	0xc5, 0x60, 0x52, 0x03, 0xe7, 0x48, 0x12, 0x2c, 0x6c, 0xdf, 0x2f, 0x4d, 0xf7, 0x6f, 0x69, 0xa2,
	0xd4, 0x48, 0x8b, 0x56, 0x59, 0xa2, 0x12, 0x7d, 0x0a, 0x2f, 0xbb, 0xac, 0xdf, 0x27, 0x41, 0x40,
	0x18, 0xb5, 0x0f, 0x30, 0xb6, 0x7d, 0x87, 0x2b, 0x9f, 0xcc, 0x1b, 0x25, 0x81, 0xfb, 0xf9, 0x45,
	0xfe, 0xf5, 0x2e, 0xe1, 0xbd, 0xb0, 0x53, 0x72, 0x59, 0x3f, 0x72, 0x77, 0xf4, 0xb3, 0x19, 0x78,
	0x87, 0x65, 0xfe, 0xc5, 0x31, 0x0e, 0x4a, 0x35, 0xec, 0x5a, 0xb7, 0x2f, 0xa8, 0x76, 0x30, 0xb6,
	0x84, 0xc0, 0x3a, 0xcc, 0x06, 0xdc, 0xe1, 0x61, 0x20, 0x7d, 0xb3, 0xb4, 0xbd, 0xf9, 0x17, 0x35,
	0x36, 0x65, 0x91, 0x15, 0x15, 0x8f, 0xb4, 0xc2, 0x01, 0xa4, 0xa0, 0x4d, 0x55, 0xab, 0xfa, 0xf0,
	0x21, 0xcc, 0xf7, 0x09, 0xe5, 0x4a, 0xbc, 0x76, 0x23, 0xf1, 0x73, 0x82, 0x40, 0x68, 0x2e, 0x7e,
	0xad, 0x41, 0xa6, 0xda, 0x0b, 0xe9, 0xa1, 0xc1, 0xa8, 0x67, 0xe1, 0x27, 0x21, 0x0e, 0x38, 0x5a,
	0x82, 0x24, 0xf1, 0x24, 0x75, 0xda, 0x4a, 0x12, 0x0f, 0x65, 0xe1, 0x56, 0x3c, 0x3e, 0xd9, 0x2c,
	0x2b, 0x5e, 0xa2, 0x47, 0xb0, 0xc8, 0xd9, 0x21, 0xa6, 0xb6, 0xd3, 0x17, 0x5e, 0x92, 0x1b, 0xbf,
	0x9e, 0x1c, 0x93, 0x72, 0x6b, 0x41, 0x72, 0x54, 0x24, 0x45, 0xb1, 0x07, 0x48, 0x0a, 0x6a, 0xd3,
	0xce, 0x8d, 0x24, 0xad, 0x43, 0x86, 0x86, 0x7d, 0xdb, 0x15, 0x1c, 0x76, 0x28, 0x49, 0xa4, 0xac,
	0xb4, 0xb5, 0x44, 0xc3, 0xfe, 0x08, 0x75, 0xf1, 0xab, 0x14, 0x2c, 0x9a, 0x34, 0x08, 0x7d, 0x87,
	0xba, 0xd8, 0x20, 0xde, 0xa5, 0x97, 0xbc, 0x01, 0xb7, 0x07, 0xf1, 0x90, 0xec, 0xf1, 0xd7, 0x65,
	0x86, 0x89, 0xc8, 0xc1, 0xe8, 0x5d, 0xc8, 0x91, 0x98, 0x4c, 0x9c, 0x8e, 0x03, 0xe2, 0xe1, 0x8b,
	0x2a, 0xd9, 0x18, 0x2b, 0x3b, 0x44, 0x3c, 0x8c, 0x00, 0x71, 0xf5, 0x47, 0x90, 0xb9, 0xa8, 0x8e,
	0x9a, 0x99, 0xbe, 0x51, 0x33, 0x97, 0x87, 0x3c, 0xaa, 0xa1, 0xe8, 0x31, 0xa0, 0x0b, 0xea, 0xa1,
	0xeb, 0x67, 0x6e, 0x64, 0x9c, 0x0b, 0x91, 0xb1, 0xe9, 0x8d, 0xa1, 0xe9, 0x67, 0xa5, 0xe9, 0x37,
	0xae, 0x32, 0xfd, 0x68, 0xa7, 0xc7, 0x1d, 0x5f, 0xfc, 0x12, 0x56, 0x87, 0xd9, 0xf1, 0xb1, 0xff,
	0x71, 0x53, 0xb5, 0x3f, 0x69, 0xea, 0x1a, 0x2c, 0x39, 0x47, 0x64, 0x80, 0x23, 0x33, 0x10, 0x4f,
	0x0e, 0x2f, 0x6d, 0x2d, 0xca, 0xa8, 0xb4, 0x82, 0xe9, 0x15, 0xbf, 0x49, 0x01, 0x54, 0x86, 0x81,
	0xff, 0xd2, 0x04, 0x93, 0x5f, 0x53, 0xfa, 0x6f, 0x7f, 0x4d, 0x53, 0x7d, 0x35, 0xf3, 0x6f, 0xfa,
	0x6a, 0xf6, 0x9f, 0xf1, 0x55, 0xf1, 0xc7, 0x24, 0x2c, 0x29, 0x2f, 0x10, 0xda, 0xfd, 0x7f, 0x32,
	0xd7, 0x99, 0xcc, 0xc6, 0xa9, 0x06, 0x77, 0xa6, 0xfe, 0xc7, 0xa0, 0xfb, 0x70, 0x6f, 0xd7, 0x7c,
	0xd4, 0x36, 0x6b, 0xf6, 0x7e, 0x65, 0xd7, 0xac, 0x55, 0x5a, 0x7b, 0x96, 0xdd, 0x6c, 0x55, 0x5a,
	0xed, 0xa6, 0xdd, 0x6e, 0x34, 0x1f, 0xd6, 0xab, 0xe6, 0x8e, 0x59, 0xaf, 0x65, 0x12, 0xa8, 0x08,
	0xfa, 0x55, 0xc0, 0x4a, 0xb5, 0x65, 0xee, 0xd7, 0x33, 0x1a, 0x5a, 0x83, 0xc2, 0x55, 0x18, 0xb3,
	0x11, 0xa1, 0x92, 0xb9, 0xf4, 0xc9, 0x77, 0x7a, 0x62, 0xe3, 0x07, 0x0d, 0xd0, 0xe5, 0x13, 0x00,
	0x3d, 0x80, 0xd7, 0xcc, 0x46, 0xb3, 0x6d, 0x55, 0x1a, 0xd5, 0xba, 0x6d, 0x98, 0xb5, 0xb8, 0xbe,
	0xb5, 0x67, 0xd4, 0x27, 0x14, 0xad, 0x41, 0xe1, 0x6a, 0xa8, 0xb1, 0xd7, 0xa8, 0xd5, 0x6b, 0x19,
	0x0d, 0xe5, 0xe1, 0xd5, 0xa9, 0xa8, 0x08, 0x90, 0x14, 0x1b, 0x9b, 0x0a, 0x68, 0x37, 0x04, 0xc4,
	0x6c, 0xbc, 0x9f, 0x49, 0x29, 0xc9, 0xc6, 0xe3, 0x67, 0x67, 0xba, 0xf6, 0xfc, 0x4c, 0xd7, 0x7e,
	0x3d, 0xd3, 0xb5, 0xd3, 0x73, 0x3d, 0xf1, 0xfc, 0x5c, 0x4f, 0xfc, 0x74, 0xae, 0x27, 0x3e, 0x36,
	0x46, 0x06, 0x53, 0x15, 0xa7, 0xdd, 0x66, 0x03, 0xf3, 0xcf, 0x98, 0x7f, 0x18, 0xad, 0x5a, 0x38,
	0xe0, 0x14, 0xf3, 0xcd, 0xc1, 0xb6, 0xb8, 0x7d, 0x7f, 0x3e, 0x71, 0x21, 0x97, 0x83, 0xeb, 0xcc,
	0xca, 0x6b, 0xdd, 0x9b, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xed, 0x3e, 0x03, 0xb4, 0x0b,
	0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEpochStartHeight != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.CurrentEpochStartHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.EpochCountingStarted {
		i--
		if m.EpochCountingStarted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CurrentEpochStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CurrentEpochStartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if m.CurrentEpoch != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x20
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidValidatorState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidValidatorState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidValidatorState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.CommissionFeeRate.Size()
		i -= size
		if _, err := m.CommissionFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Val.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidStakingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidStakingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidStakingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MintRate.Size()
		i -= size
		if _, err := m.MintRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChunkBondRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkBondRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkBondRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChunkUnbondRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkUnbondRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkUnbondRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumChunkUnbond != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.NumChunkUnbond))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsuranceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsuranceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsuranceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.InsuranceFeeRate.Size()
		i -= size
		if _, err := m.InsuranceFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.InsuranceAmount.Size()
		i -= size
		if _, err := m.InsuranceAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.InsuranceProviderAddress) > 0 {
		i -= len(m.InsuranceProviderAddress)
		copy(dAtA[i:], m.InsuranceProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.InsuranceProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsuranceUnbondRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsuranceUnbondRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsuranceUnbondRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AliveChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.AliveChunkId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InsuranceProviderAddress) > 0 {
		i -= len(m.InsuranceProviderAddress)
		copy(dAtA[i:], m.InsuranceProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.InsuranceProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AliveChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliveChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliveChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InsuranceFeeRate.Size()
		i -= size
		if _, err := m.InsuranceFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InsuranceAmount.Size()
		i -= size
		if _, err := m.InsuranceAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.InsuranceProviderAddress) > 0 {
		i -= len(m.InsuranceProviderAddress)
		copy(dAtA[i:], m.InsuranceProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.InsuranceProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InsuranceAmount.Size()
		i -= size
		if _, err := m.InsuranceAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.InsuranceProviderAddress) > 0 {
		i -= len(m.InsuranceProviderAddress)
		copy(dAtA[i:], m.InsuranceProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.InsuranceProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.CurrentEpoch != 0 {
		n += 1 + sovLiquidstaking(uint64(m.CurrentEpoch))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CurrentEpochStartTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.EpochCountingStarted {
		n += 2
	}
	if m.CurrentEpochStartHeight != 0 {
		n += 1 + sovLiquidstaking(uint64(m.CurrentEpochStartHeight))
	}
	return n
}

func (m *LiquidValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	return n
}

func (m *LiquidValidatorState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Val.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.CommissionFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *LiquidStakingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *ChunkBondRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *ChunkUnbondRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	if m.NumChunkUnbond != 0 {
		n += 1 + sovLiquidstaking(uint64(m.NumChunkUnbond))
	}
	return n
}

func (m *InsuranceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.InsuranceProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.InsuranceAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.InsuranceFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *InsuranceUnbondRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsuranceProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	if m.AliveChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.AliveChunkId))
	}
	return n
}

func (m *AliveChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.InsuranceProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.InsuranceAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.InsuranceFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *UnbondingChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.InsuranceProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.InsuranceAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CurrentEpochStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochCountingStarted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpochCountingStarted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStartHeight", wireType)
			}
			m.CurrentEpochStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidValidatorState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidValidatorState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidValidatorState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Val.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LiquidValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidStakingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidStakingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidStakingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkBondRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkBondRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkBondRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkUnbondRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkUnbondRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkUnbondRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChunkUnbond", wireType)
			}
			m.NumChunkUnbond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChunkUnbond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsuranceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsuranceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsuranceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InsuranceBidStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsuranceUnbondRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsuranceUnbondRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsuranceUnbondRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveChunkId", wireType)
			}
			m.AliveChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AliveChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliveChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliveChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliveChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
