// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgLiquidStaking struct {
	RequesterAddress string                                 `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	TokenAmount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount"`
}

func (m *MsgLiquidStaking) Reset()         { *m = MsgLiquidStaking{} }
func (m *MsgLiquidStaking) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidStaking) ProtoMessage()    {}
func (*MsgLiquidStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{0}
}
func (m *MsgLiquidStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidStaking.Merge(m, src)
}
func (m *MsgLiquidStaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidStaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidStaking proto.InternalMessageInfo

type MsgLiquidStakingResponse struct {
	ChunkId uint64 `protobuf:"varint,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (m *MsgLiquidStakingResponse) Reset()         { *m = MsgLiquidStakingResponse{} }
func (m *MsgLiquidStakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidStakingResponse) ProtoMessage()    {}
func (*MsgLiquidStakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{1}
}
func (m *MsgLiquidStakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidStakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidStakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidStakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidStakingResponse.Merge(m, src)
}
func (m *MsgLiquidStakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidStakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidStakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidStakingResponse proto.InternalMessageInfo

type MsgCancelLiquidStaking struct {
	RequesterAddress   string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	ChunkBondRequestId uint64 `protobuf:"varint,2,opt,name=chunk_bond_request_id,json=chunkBondRequestId,proto3" json:"chunk_bond_request_id,omitempty"`
}

func (m *MsgCancelLiquidStaking) Reset()         { *m = MsgCancelLiquidStaking{} }
func (m *MsgCancelLiquidStaking) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLiquidStaking) ProtoMessage()    {}
func (*MsgCancelLiquidStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{2}
}
func (m *MsgCancelLiquidStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLiquidStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLiquidStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLiquidStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLiquidStaking.Merge(m, src)
}
func (m *MsgCancelLiquidStaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLiquidStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLiquidStaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLiquidStaking proto.InternalMessageInfo

type MsgCancelLiquidStakingResponse struct {
}

func (m *MsgCancelLiquidStakingResponse) Reset()         { *m = MsgCancelLiquidStakingResponse{} }
func (m *MsgCancelLiquidStakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLiquidStakingResponse) ProtoMessage()    {}
func (*MsgCancelLiquidStakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{3}
}
func (m *MsgCancelLiquidStakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLiquidStakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLiquidStakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLiquidStakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLiquidStakingResponse.Merge(m, src)
}
func (m *MsgCancelLiquidStakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLiquidStakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLiquidStakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLiquidStakingResponse proto.InternalMessageInfo

type MsgLiquidUnstaking struct {
	RequesterAddress string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	NumChunkUnstake  uint64 `protobuf:"varint,2,opt,name=num_chunk_unstake,json=numChunkUnstake,proto3" json:"num_chunk_unstake,omitempty"`
}

func (m *MsgLiquidUnstaking) Reset()         { *m = MsgLiquidUnstaking{} }
func (m *MsgLiquidUnstaking) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidUnstaking) ProtoMessage()    {}
func (*MsgLiquidUnstaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{4}
}
func (m *MsgLiquidUnstaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidUnstaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidUnstaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidUnstaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidUnstaking.Merge(m, src)
}
func (m *MsgLiquidUnstaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidUnstaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidUnstaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidUnstaking proto.InternalMessageInfo

type MsgLiquidUnstakingResponse struct {
}

func (m *MsgLiquidUnstakingResponse) Reset()         { *m = MsgLiquidUnstakingResponse{} }
func (m *MsgLiquidUnstakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidUnstakingResponse) ProtoMessage()    {}
func (*MsgLiquidUnstakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{5}
}
func (m *MsgLiquidUnstakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidUnstakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidUnstakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidUnstakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidUnstakingResponse.Merge(m, src)
}
func (m *MsgLiquidUnstakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidUnstakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidUnstakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidUnstakingResponse proto.InternalMessageInfo

type MsgCancelLiquidUnstaking struct {
	RequesterAddress     string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	ChunkUnbondRequestId uint64 `protobuf:"varint,2,opt,name=chunk_unbond_request_id,json=chunkUnbondRequestId,proto3" json:"chunk_unbond_request_id,omitempty"`
}

func (m *MsgCancelLiquidUnstaking) Reset()         { *m = MsgCancelLiquidUnstaking{} }
func (m *MsgCancelLiquidUnstaking) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLiquidUnstaking) ProtoMessage()    {}
func (*MsgCancelLiquidUnstaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{6}
}
func (m *MsgCancelLiquidUnstaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLiquidUnstaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLiquidUnstaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLiquidUnstaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLiquidUnstaking.Merge(m, src)
}
func (m *MsgCancelLiquidUnstaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLiquidUnstaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLiquidUnstaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLiquidUnstaking proto.InternalMessageInfo

type MsgCancelLiquidUnstakingResponse struct {
}

func (m *MsgCancelLiquidUnstakingResponse) Reset()         { *m = MsgCancelLiquidUnstakingResponse{} }
func (m *MsgCancelLiquidUnstakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLiquidUnstakingResponse) ProtoMessage()    {}
func (*MsgCancelLiquidUnstakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{7}
}
func (m *MsgCancelLiquidUnstakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLiquidUnstakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLiquidUnstakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLiquidUnstakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLiquidUnstakingResponse.Merge(m, src)
}
func (m *MsgCancelLiquidUnstakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLiquidUnstakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLiquidUnstakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLiquidUnstakingResponse proto.InternalMessageInfo

type MsgBidInsurance struct {
	RequesterAddress string                                 `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	ValidatorAddress string                                 `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           types.Coin                             `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	InsuranceFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=insurance_fee_rate,json=insuranceFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"insurance_fee_rate"`
}

func (m *MsgBidInsurance) Reset()         { *m = MsgBidInsurance{} }
func (m *MsgBidInsurance) String() string { return proto.CompactTextString(m) }
func (*MsgBidInsurance) ProtoMessage()    {}
func (*MsgBidInsurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{8}
}
func (m *MsgBidInsurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBidInsurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBidInsurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBidInsurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBidInsurance.Merge(m, src)
}
func (m *MsgBidInsurance) XXX_Size() int {
	return m.Size()
}
func (m *MsgBidInsurance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBidInsurance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBidInsurance proto.InternalMessageInfo

type MsgBidInsuranceResponse struct {
	RequesterAddress string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	BidId            uint64 `protobuf:"varint,2,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
}

func (m *MsgBidInsuranceResponse) Reset()         { *m = MsgBidInsuranceResponse{} }
func (m *MsgBidInsuranceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBidInsuranceResponse) ProtoMessage()    {}
func (*MsgBidInsuranceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{9}
}
func (m *MsgBidInsuranceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBidInsuranceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBidInsuranceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBidInsuranceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBidInsuranceResponse.Merge(m, src)
}
func (m *MsgBidInsuranceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBidInsuranceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBidInsuranceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBidInsuranceResponse proto.InternalMessageInfo

type MsgCancelInsuranceBid struct {
	RequesterAddress string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	BidId            uint64 `protobuf:"varint,2,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
}

func (m *MsgCancelInsuranceBid) Reset()         { *m = MsgCancelInsuranceBid{} }
func (m *MsgCancelInsuranceBid) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInsuranceBid) ProtoMessage()    {}
func (*MsgCancelInsuranceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{10}
}
func (m *MsgCancelInsuranceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInsuranceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInsuranceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInsuranceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInsuranceBid.Merge(m, src)
}
func (m *MsgCancelInsuranceBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInsuranceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInsuranceBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInsuranceBid proto.InternalMessageInfo

type MsgCancelInsuranceBidResponse struct {
}

func (m *MsgCancelInsuranceBidResponse) Reset()         { *m = MsgCancelInsuranceBidResponse{} }
func (m *MsgCancelInsuranceBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInsuranceBidResponse) ProtoMessage()    {}
func (*MsgCancelInsuranceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{11}
}
func (m *MsgCancelInsuranceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInsuranceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInsuranceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInsuranceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInsuranceBidResponse.Merge(m, src)
}
func (m *MsgCancelInsuranceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInsuranceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInsuranceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInsuranceBidResponse proto.InternalMessageInfo

type MsgUnbondInsurance struct {
	RequesterAddress string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	AliveChunkId     uint64 `protobuf:"varint,2,opt,name=alive_chunk_id,json=aliveChunkId,proto3" json:"alive_chunk_id,omitempty"`
}

func (m *MsgUnbondInsurance) Reset()         { *m = MsgUnbondInsurance{} }
func (m *MsgUnbondInsurance) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondInsurance) ProtoMessage()    {}
func (*MsgUnbondInsurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{12}
}
func (m *MsgUnbondInsurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondInsurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondInsurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondInsurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondInsurance.Merge(m, src)
}
func (m *MsgUnbondInsurance) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondInsurance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondInsurance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondInsurance proto.InternalMessageInfo

type MsgUnbondInsuranceResponse struct {
	UnbondRequestId uint64 `protobuf:"varint,1,opt,name=unbond_request_id,json=unbondRequestId,proto3" json:"unbond_request_id,omitempty"`
}

func (m *MsgUnbondInsuranceResponse) Reset()         { *m = MsgUnbondInsuranceResponse{} }
func (m *MsgUnbondInsuranceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondInsuranceResponse) ProtoMessage()    {}
func (*MsgUnbondInsuranceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{13}
}
func (m *MsgUnbondInsuranceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondInsuranceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondInsuranceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondInsuranceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondInsuranceResponse.Merge(m, src)
}
func (m *MsgUnbondInsuranceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondInsuranceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondInsuranceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondInsuranceResponse proto.InternalMessageInfo

type MsgCancelInsuranceUnbond struct {
	RequesterAddress string `protobuf:"bytes,1,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
	UnbondRequestId  uint64 `protobuf:"varint,2,opt,name=unbond_request_id,json=unbondRequestId,proto3" json:"unbond_request_id,omitempty"`
}

func (m *MsgCancelInsuranceUnbond) Reset()         { *m = MsgCancelInsuranceUnbond{} }
func (m *MsgCancelInsuranceUnbond) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInsuranceUnbond) ProtoMessage()    {}
func (*MsgCancelInsuranceUnbond) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{14}
}
func (m *MsgCancelInsuranceUnbond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInsuranceUnbond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInsuranceUnbond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInsuranceUnbond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInsuranceUnbond.Merge(m, src)
}
func (m *MsgCancelInsuranceUnbond) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInsuranceUnbond) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInsuranceUnbond.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInsuranceUnbond proto.InternalMessageInfo

type MsgCancelInsuranceUnbondResponse struct {
}

func (m *MsgCancelInsuranceUnbondResponse) Reset()         { *m = MsgCancelInsuranceUnbondResponse{} }
func (m *MsgCancelInsuranceUnbondResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInsuranceUnbondResponse) ProtoMessage()    {}
func (*MsgCancelInsuranceUnbondResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b50b1abccb5854, []int{15}
}
func (m *MsgCancelInsuranceUnbondResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInsuranceUnbondResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInsuranceUnbondResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInsuranceUnbondResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInsuranceUnbondResponse.Merge(m, src)
}
func (m *MsgCancelInsuranceUnbondResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInsuranceUnbondResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInsuranceUnbondResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInsuranceUnbondResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgLiquidStaking)(nil), "canto.liquidstaking.v1.MsgLiquidStaking")
	proto.RegisterType((*MsgLiquidStakingResponse)(nil), "canto.liquidstaking.v1.MsgLiquidStakingResponse")
	proto.RegisterType((*MsgCancelLiquidStaking)(nil), "canto.liquidstaking.v1.MsgCancelLiquidStaking")
	proto.RegisterType((*MsgCancelLiquidStakingResponse)(nil), "canto.liquidstaking.v1.MsgCancelLiquidStakingResponse")
	proto.RegisterType((*MsgLiquidUnstaking)(nil), "canto.liquidstaking.v1.MsgLiquidUnstaking")
	proto.RegisterType((*MsgLiquidUnstakingResponse)(nil), "canto.liquidstaking.v1.MsgLiquidUnstakingResponse")
	proto.RegisterType((*MsgCancelLiquidUnstaking)(nil), "canto.liquidstaking.v1.MsgCancelLiquidUnstaking")
	proto.RegisterType((*MsgCancelLiquidUnstakingResponse)(nil), "canto.liquidstaking.v1.MsgCancelLiquidUnstakingResponse")
	proto.RegisterType((*MsgBidInsurance)(nil), "canto.liquidstaking.v1.MsgBidInsurance")
	proto.RegisterType((*MsgBidInsuranceResponse)(nil), "canto.liquidstaking.v1.MsgBidInsuranceResponse")
	proto.RegisterType((*MsgCancelInsuranceBid)(nil), "canto.liquidstaking.v1.MsgCancelInsuranceBid")
	proto.RegisterType((*MsgCancelInsuranceBidResponse)(nil), "canto.liquidstaking.v1.MsgCancelInsuranceBidResponse")
	proto.RegisterType((*MsgUnbondInsurance)(nil), "canto.liquidstaking.v1.MsgUnbondInsurance")
	proto.RegisterType((*MsgUnbondInsuranceResponse)(nil), "canto.liquidstaking.v1.MsgUnbondInsuranceResponse")
	proto.RegisterType((*MsgCancelInsuranceUnbond)(nil), "canto.liquidstaking.v1.MsgCancelInsuranceUnbond")
	proto.RegisterType((*MsgCancelInsuranceUnbondResponse)(nil), "canto.liquidstaking.v1.MsgCancelInsuranceUnbondResponse")
}

func init() { proto.RegisterFile("canto/liquidstaking/v1/tx.proto", fileDescriptor_a8b50b1abccb5854) }

var fileDescriptor_a8b50b1abccb5854 = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0x8e, 0xd3, 0xd2, 0xc2, 0xb4, 0x90, 0xc6, 0x34, 0x6d, 0x6a, 0x81, 0x13, 0x59, 0x08, 0xaa,
	0x56, 0xb1, 0x9b, 0xa0, 0x02, 0xd7, 0x26, 0x08, 0x11, 0x89, 0x20, 0x61, 0xe0, 0xc2, 0x1f, 0x59,
	0xb6, 0x67, 0x70, 0xad, 0x24, 0x33, 0x6d, 0x66, 0x1c, 0x0a, 0x12, 0x1c, 0xe0, 0x05, 0x10, 0x4f,
	0xb1, 0x8f, 0xd2, 0xbd, 0xf5, 0xb8, 0xda, 0x43, 0xb5, 0x9b, 0xbe, 0xc8, 0xca, 0x33, 0xce, 0x24,
	0x71, 0x9d, 0x34, 0xe9, 0xee, 0x29, 0xf1, 0xcc, 0xe7, 0xef, 0xfb, 0xe6, 0xf7, 0xcf, 0x03, 0x2a,
	0xbe, 0x8b, 0x19, 0xb1, 0x7a, 0xe1, 0x65, 0x14, 0x42, 0xca, 0xdc, 0x6e, 0x88, 0x03, 0x6b, 0x58,
	0xb7, 0xd8, 0x95, 0x79, 0x31, 0x20, 0x8c, 0xa8, 0x7b, 0x1c, 0x60, 0xce, 0x00, 0xcc, 0x61, 0x5d,
	0xd3, 0x7d, 0x42, 0xfb, 0x84, 0x5a, 0x9e, 0x4b, 0x91, 0x35, 0xac, 0x7b, 0x88, 0xb9, 0x75, 0xcb,
	0x27, 0x21, 0x16, 0xef, 0x69, 0xbb, 0x01, 0x09, 0x08, 0xff, 0x6b, 0xc5, 0xff, 0xc4, 0xaa, 0xf1,
	0xbf, 0x02, 0x76, 0x3a, 0x34, 0xf8, 0x86, 0xb3, 0x7d, 0x2f, 0xd8, 0xd4, 0x63, 0x50, 0x1c, 0xa0,
	0xcb, 0x08, 0x51, 0x86, 0x06, 0x8e, 0x0b, 0xe1, 0x00, 0x51, 0x5a, 0x56, 0xaa, 0xca, 0xe1, 0x3b,
	0xf6, 0x8e, 0xdc, 0x38, 0x13, 0xeb, 0xea, 0x77, 0x60, 0x9b, 0x91, 0x2e, 0xc2, 0x8e, 0xdb, 0x27,
	0x11, 0x66, 0xe5, 0x7c, 0x8c, 0x6b, 0x9a, 0xd7, 0xb7, 0x95, 0xdc, 0xf3, 0xdb, 0xca, 0xc7, 0x41,
	0xc8, 0xce, 0x23, 0xcf, 0xf4, 0x49, 0xdf, 0x4a, 0x0c, 0x8a, 0x9f, 0x1a, 0x85, 0x5d, 0x8b, 0xfd,
	0x71, 0x81, 0xa8, 0xd9, 0xc6, 0xcc, 0xde, 0xe2, 0x1c, 0x67, 0x9c, 0xc2, 0x38, 0x05, 0xe5, 0xb4,
	0x27, 0x1b, 0xd1, 0x0b, 0x82, 0x29, 0x52, 0x0f, 0xc0, 0xdb, 0xfe, 0x79, 0x84, 0xbb, 0x4e, 0x08,
	0xb9, 0xa5, 0x75, 0x7b, 0x93, 0x3f, 0xb7, 0xa1, 0x71, 0x05, 0xf6, 0x3a, 0x34, 0x68, 0xb9, 0xd8,
	0x47, 0xbd, 0xd7, 0x38, 0x50, 0x1d, 0x94, 0x84, 0x82, 0x47, 0x30, 0x74, 0x92, 0xed, 0x58, 0x2e,
	0xcf, 0xe5, 0x54, 0xbe, 0xd9, 0x24, 0x18, 0xda, 0x62, 0xab, 0x0d, 0x8d, 0x2a, 0xd0, 0xb3, 0x95,
	0xc7, 0xb6, 0x8d, 0x3e, 0x50, 0xe5, 0x91, 0x7e, 0xc4, 0xf4, 0x31, 0xbe, 0x8e, 0x40, 0x11, 0x47,
	0x7d, 0x47, 0x78, 0x8b, 0x38, 0x07, 0x4a, 0x3c, 0x15, 0x70, 0xd4, 0x6f, 0xc5, 0xeb, 0x82, 0x1a,
	0x19, 0x1f, 0x00, 0xed, 0xbe, 0x9c, 0x34, 0xf3, 0x37, 0x8f, 0xef, 0xb4, 0xdd, 0x47, 0x5a, 0x3a,
	0x05, 0xfb, 0x63, 0x3b, 0xd9, 0xc1, 0xda, 0xf5, 0x85, 0x2b, 0x6f, 0x26, 0x5c, 0x06, 0xa8, 0xce,
	0xd3, 0x97, 0x1e, 0xff, 0xc9, 0x83, 0x42, 0x87, 0x06, 0xcd, 0x10, 0xb6, 0x31, 0x8d, 0x06, 0x31,
	0x76, 0x35, 0x6f, 0xc7, 0xa0, 0x38, 0x74, 0x7b, 0x21, 0x74, 0x19, 0x99, 0x80, 0xf3, 0x02, 0x2c,
	0x37, 0xc6, 0xe0, 0xcf, 0xc1, 0x46, 0x52, 0xbe, 0x6b, 0x55, 0xe5, 0x70, 0xab, 0x71, 0x60, 0x8a,
	0x2a, 0x35, 0xe3, 0x6e, 0x32, 0x93, 0x6e, 0x32, 0x5b, 0x24, 0xc4, 0xcd, 0xf5, 0xb8, 0xb2, 0xed,
	0x04, 0xae, 0xfe, 0x02, 0xd4, 0x70, 0xec, 0xcf, 0xf9, 0x0d, 0x21, 0x67, 0xe0, 0x32, 0x54, 0x5e,
	0x5f, 0xb9, 0x07, 0xbe, 0x44, 0xbe, 0xbd, 0x23, 0x99, 0xbe, 0x42, 0xc8, 0x76, 0x19, 0x32, 0x7e,
	0x05, 0xfb, 0xa9, 0x18, 0xc8, 0x3e, 0x58, 0x29, 0x16, 0x25, 0xb0, 0xe1, 0x85, 0x70, 0x92, 0x96,
	0xb7, 0xbc, 0x10, 0xb6, 0xa1, 0xf1, 0x33, 0x28, 0xc9, 0x3c, 0x48, 0x85, 0x66, 0x08, 0xdf, 0x08,
	0x79, 0x05, 0x7c, 0x98, 0x49, 0x2e, 0x33, 0x1c, 0xf0, 0x96, 0x10, 0xb5, 0xf1, 0xc8, 0x1c, 0x7f,
	0x04, 0xde, 0x73, 0x7b, 0xe1, 0x10, 0x39, 0x72, 0x24, 0x08, 0x0b, 0xdb, 0x7c, 0xb5, 0x95, 0xcc,
	0x85, 0xaf, 0x79, 0x33, 0xa4, 0x84, 0x64, 0x20, 0x8f, 0x40, 0xf1, 0x7e, 0xf5, 0x8a, 0xc9, 0x52,
	0x88, 0x52, 0x85, 0x4b, 0xa7, 0x1a, 0x47, 0x32, 0x09, 0xe2, 0x95, 0x7b, 0x79, 0x5e, 0xcb, 0xdc,
	0x13, 0x9d, 0xee, 0x96, 0x94, 0xe8, 0xf8, 0x10, 0x8d, 0xa7, 0x9b, 0x60, 0xad, 0x43, 0x03, 0xb5,
	0x0b, 0xde, 0x9d, 0x9d, 0x7c, 0x87, 0x66, 0xf6, 0xe7, 0xc2, 0x4c, 0x0f, 0x58, 0xed, 0x64, 0x59,
	0xa4, 0x8c, 0xdc, 0x5f, 0xe0, 0xfd, 0xac, 0x61, 0x6b, 0x2e, 0x20, 0xca, 0xc0, 0x6b, 0x9f, 0xad,
	0x86, 0x97, 0xf2, 0x97, 0xa0, 0x90, 0x1e, 0x5e, 0x47, 0x0f, 0x9e, 0x41, 0x62, 0xb5, 0xc6, 0xf2,
	0x58, 0x29, 0xf9, 0xaf, 0x02, 0x4a, 0xd9, 0x63, 0xf3, 0x64, 0xc9, 0x43, 0x4c, 0xf4, 0xbf, 0x58,
	0xf5, 0x0d, 0xe9, 0xe2, 0x1c, 0x6c, 0xcf, 0x8c, 0xc5, 0x4f, 0x16, 0x30, 0x4d, 0x03, 0x35, 0x6b,
	0x49, 0xa0, 0x54, 0xfa, 0x13, 0xa8, 0x19, 0xd3, 0xa1, 0xf6, 0xa0, 0xf3, 0x69, 0xb8, 0x76, 0xba,
	0x12, 0x7c, 0x3a, 0xbd, 0xe9, 0xd9, 0xb0, 0x28, 0xbd, 0x29, 0xec, 0xc2, 0xf4, 0xce, 0x1b, 0x05,
	0x93, 0xf4, 0xa6, 0x9b, 0xfb, 0x64, 0xf9, 0x33, 0x88, 0x37, 0x96, 0x48, 0xef, 0x9c, 0x5e, 0x6e,
	0xc2, 0xeb, 0x97, 0x7a, 0xee, 0xc9, 0x48, 0xcf, 0x5d, 0x8f, 0x74, 0xe5, 0x66, 0xa4, 0x2b, 0x2f,
	0x46, 0xba, 0xf2, 0xdf, 0x9d, 0x9e, 0xbb, 0xb9, 0xd3, 0x73, 0xcf, 0xee, 0xf4, 0xdc, 0x4f, 0xcd,
	0xa9, 0x0f, 0x4a, 0x2b, 0x56, 0xa9, 0x7d, 0x8b, 0xd8, 0xef, 0x64, 0xd0, 0x4d, 0x9e, 0x7e, 0x40,
	0x94, 0x61, 0xc4, 0x6a, 0xc3, 0x46, 0x7c, 0x73, 0xbc, 0x4a, 0x5d, 0x26, 0xf9, 0x07, 0xc7, 0xdb,
	0xe0, 0xf7, 0xbf, 0x4f, 0x5f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xba, 0x42, 0xf5, 0x70, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// TBD
	LiquidStaking(ctx context.Context, in *MsgLiquidStaking, opts ...grpc.CallOption) (*MsgLiquidStakingResponse, error)
	// TBD
	CancelLiquidStaking(ctx context.Context, in *MsgCancelLiquidStaking, opts ...grpc.CallOption) (*MsgCancelLiquidStakingResponse, error)
	// TBD
	LiquidUnstaking(ctx context.Context, in *MsgLiquidUnstaking, opts ...grpc.CallOption) (*MsgLiquidUnstakingResponse, error)
	// TBD
	CancelLiquidUnstaking(ctx context.Context, in *MsgCancelLiquidUnstaking, opts ...grpc.CallOption) (*MsgCancelLiquidUnstakingResponse, error)
	// TBD
	BidInsurance(ctx context.Context, in *MsgBidInsurance, opts ...grpc.CallOption) (*MsgBidInsuranceResponse, error)
	// TBD
	CancelInsuranceBid(ctx context.Context, in *MsgCancelInsuranceBid, opts ...grpc.CallOption) (*MsgCancelInsuranceBidResponse, error)
	// TBD
	UnbondInsurance(ctx context.Context, in *MsgUnbondInsurance, opts ...grpc.CallOption) (*MsgUnbondInsuranceResponse, error)
	// TBD
	CancelInsuranceUnbond(ctx context.Context, in *MsgCancelInsuranceUnbond, opts ...grpc.CallOption) (*MsgCancelInsuranceUnbondResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LiquidStaking(ctx context.Context, in *MsgLiquidStaking, opts ...grpc.CallOption) (*MsgLiquidStakingResponse, error) {
	out := new(MsgLiquidStakingResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/LiquidStaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelLiquidStaking(ctx context.Context, in *MsgCancelLiquidStaking, opts ...grpc.CallOption) (*MsgCancelLiquidStakingResponse, error) {
	out := new(MsgCancelLiquidStakingResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/CancelLiquidStaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LiquidUnstaking(ctx context.Context, in *MsgLiquidUnstaking, opts ...grpc.CallOption) (*MsgLiquidUnstakingResponse, error) {
	out := new(MsgLiquidUnstakingResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/LiquidUnstaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelLiquidUnstaking(ctx context.Context, in *MsgCancelLiquidUnstaking, opts ...grpc.CallOption) (*MsgCancelLiquidUnstakingResponse, error) {
	out := new(MsgCancelLiquidUnstakingResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/CancelLiquidUnstaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BidInsurance(ctx context.Context, in *MsgBidInsurance, opts ...grpc.CallOption) (*MsgBidInsuranceResponse, error) {
	out := new(MsgBidInsuranceResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/BidInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelInsuranceBid(ctx context.Context, in *MsgCancelInsuranceBid, opts ...grpc.CallOption) (*MsgCancelInsuranceBidResponse, error) {
	out := new(MsgCancelInsuranceBidResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/CancelInsuranceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnbondInsurance(ctx context.Context, in *MsgUnbondInsurance, opts ...grpc.CallOption) (*MsgUnbondInsuranceResponse, error) {
	out := new(MsgUnbondInsuranceResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/UnbondInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelInsuranceUnbond(ctx context.Context, in *MsgCancelInsuranceUnbond, opts ...grpc.CallOption) (*MsgCancelInsuranceUnbondResponse, error) {
	out := new(MsgCancelInsuranceUnbondResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Msg/CancelInsuranceUnbond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// TBD
	LiquidStaking(context.Context, *MsgLiquidStaking) (*MsgLiquidStakingResponse, error)
	// TBD
	CancelLiquidStaking(context.Context, *MsgCancelLiquidStaking) (*MsgCancelLiquidStakingResponse, error)
	// TBD
	LiquidUnstaking(context.Context, *MsgLiquidUnstaking) (*MsgLiquidUnstakingResponse, error)
	// TBD
	CancelLiquidUnstaking(context.Context, *MsgCancelLiquidUnstaking) (*MsgCancelLiquidUnstakingResponse, error)
	// TBD
	BidInsurance(context.Context, *MsgBidInsurance) (*MsgBidInsuranceResponse, error)
	// TBD
	CancelInsuranceBid(context.Context, *MsgCancelInsuranceBid) (*MsgCancelInsuranceBidResponse, error)
	// TBD
	UnbondInsurance(context.Context, *MsgUnbondInsurance) (*MsgUnbondInsuranceResponse, error)
	// TBD
	CancelInsuranceUnbond(context.Context, *MsgCancelInsuranceUnbond) (*MsgCancelInsuranceUnbondResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) LiquidStaking(ctx context.Context, req *MsgLiquidStaking) (*MsgLiquidStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidStaking not implemented")
}
func (*UnimplementedMsgServer) CancelLiquidStaking(ctx context.Context, req *MsgCancelLiquidStaking) (*MsgCancelLiquidStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLiquidStaking not implemented")
}
func (*UnimplementedMsgServer) LiquidUnstaking(ctx context.Context, req *MsgLiquidUnstaking) (*MsgLiquidUnstakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidUnstaking not implemented")
}
func (*UnimplementedMsgServer) CancelLiquidUnstaking(ctx context.Context, req *MsgCancelLiquidUnstaking) (*MsgCancelLiquidUnstakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLiquidUnstaking not implemented")
}
func (*UnimplementedMsgServer) BidInsurance(ctx context.Context, req *MsgBidInsurance) (*MsgBidInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidInsurance not implemented")
}
func (*UnimplementedMsgServer) CancelInsuranceBid(ctx context.Context, req *MsgCancelInsuranceBid) (*MsgCancelInsuranceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInsuranceBid not implemented")
}
func (*UnimplementedMsgServer) UnbondInsurance(ctx context.Context, req *MsgUnbondInsurance) (*MsgUnbondInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondInsurance not implemented")
}
func (*UnimplementedMsgServer) CancelInsuranceUnbond(ctx context.Context, req *MsgCancelInsuranceUnbond) (*MsgCancelInsuranceUnbondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInsuranceUnbond not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LiquidStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/LiquidStaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidStaking(ctx, req.(*MsgLiquidStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelLiquidStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelLiquidStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelLiquidStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/CancelLiquidStaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelLiquidStaking(ctx, req.(*MsgCancelLiquidStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LiquidUnstaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidUnstaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidUnstaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/LiquidUnstaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidUnstaking(ctx, req.(*MsgLiquidUnstaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelLiquidUnstaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelLiquidUnstaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelLiquidUnstaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/CancelLiquidUnstaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelLiquidUnstaking(ctx, req.(*MsgCancelLiquidUnstaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BidInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBidInsurance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BidInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/BidInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BidInsurance(ctx, req.(*MsgBidInsurance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelInsuranceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelInsuranceBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelInsuranceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/CancelInsuranceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelInsuranceBid(ctx, req.(*MsgCancelInsuranceBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnbondInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnbondInsurance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnbondInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/UnbondInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnbondInsurance(ctx, req.(*MsgUnbondInsurance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelInsuranceUnbond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelInsuranceUnbond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelInsuranceUnbond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Msg/CancelInsuranceUnbond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelInsuranceUnbond(ctx, req.(*MsgCancelInsuranceUnbond))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.liquidstaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiquidStaking",
			Handler:    _Msg_LiquidStaking_Handler,
		},
		{
			MethodName: "CancelLiquidStaking",
			Handler:    _Msg_CancelLiquidStaking_Handler,
		},
		{
			MethodName: "LiquidUnstaking",
			Handler:    _Msg_LiquidUnstaking_Handler,
		},
		{
			MethodName: "CancelLiquidUnstaking",
			Handler:    _Msg_CancelLiquidUnstaking_Handler,
		},
		{
			MethodName: "BidInsurance",
			Handler:    _Msg_BidInsurance_Handler,
		},
		{
			MethodName: "CancelInsuranceBid",
			Handler:    _Msg_CancelInsuranceBid_Handler,
		},
		{
			MethodName: "UnbondInsurance",
			Handler:    _Msg_UnbondInsurance_Handler,
		},
		{
			MethodName: "CancelInsuranceUnbond",
			Handler:    _Msg_CancelInsuranceUnbond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/liquidstaking/v1/tx.proto",
}

func (m *MsgLiquidStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidStakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidStakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidStakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChunkId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLiquidStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLiquidStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLiquidStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChunkBondRequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChunkBondRequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLiquidStakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLiquidStakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLiquidStakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLiquidUnstaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidUnstaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidUnstaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumChunkUnstake != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumChunkUnstake))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidUnstakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidUnstakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidUnstakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelLiquidUnstaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLiquidUnstaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLiquidUnstaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChunkUnbondRequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChunkUnbondRequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLiquidUnstakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLiquidUnstakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLiquidUnstakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBidInsurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBidInsurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBidInsurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InsuranceFeeRate.Size()
		i -= size
		if _, err := m.InsuranceFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBidInsuranceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBidInsuranceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBidInsuranceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInsuranceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInsuranceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInsuranceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInsuranceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInsuranceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInsuranceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnbondInsurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondInsurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondInsurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AliveChunkId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AliveChunkId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnbondInsuranceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondInsuranceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondInsuranceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondRequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnbondRequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInsuranceUnbond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInsuranceUnbond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInsuranceUnbond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondRequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnbondRequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInsuranceUnbondResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInsuranceUnbondResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInsuranceUnbondResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgLiquidStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgLiquidStakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkId != 0 {
		n += 1 + sovTx(uint64(m.ChunkId))
	}
	return n
}

func (m *MsgCancelLiquidStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChunkBondRequestId != 0 {
		n += 1 + sovTx(uint64(m.ChunkBondRequestId))
	}
	return n
}

func (m *MsgCancelLiquidStakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLiquidUnstaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumChunkUnstake != 0 {
		n += 1 + sovTx(uint64(m.NumChunkUnstake))
	}
	return n
}

func (m *MsgLiquidUnstakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelLiquidUnstaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChunkUnbondRequestId != 0 {
		n += 1 + sovTx(uint64(m.ChunkUnbondRequestId))
	}
	return n
}

func (m *MsgCancelLiquidUnstakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBidInsurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.InsuranceFeeRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBidInsuranceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BidId != 0 {
		n += 1 + sovTx(uint64(m.BidId))
	}
	return n
}

func (m *MsgCancelInsuranceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BidId != 0 {
		n += 1 + sovTx(uint64(m.BidId))
	}
	return n
}

func (m *MsgCancelInsuranceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnbondInsurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AliveChunkId != 0 {
		n += 1 + sovTx(uint64(m.AliveChunkId))
	}
	return n
}

func (m *MsgUnbondInsuranceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnbondRequestId != 0 {
		n += 1 + sovTx(uint64(m.UnbondRequestId))
	}
	return n
}

func (m *MsgCancelInsuranceUnbond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnbondRequestId != 0 {
		n += 1 + sovTx(uint64(m.UnbondRequestId))
	}
	return n
}

func (m *MsgCancelInsuranceUnbondResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLiquidStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidStakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidStakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidStakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLiquidStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLiquidStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLiquidStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkBondRequestId", wireType)
			}
			m.ChunkBondRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkBondRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLiquidStakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLiquidStakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLiquidStakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidUnstaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidUnstaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidUnstaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChunkUnstake", wireType)
			}
			m.NumChunkUnstake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChunkUnstake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidUnstakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidUnstakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidUnstakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLiquidUnstaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLiquidUnstaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLiquidUnstaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkUnbondRequestId", wireType)
			}
			m.ChunkUnbondRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkUnbondRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLiquidUnstakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLiquidUnstakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLiquidUnstakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBidInsurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBidInsurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBidInsurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBidInsuranceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBidInsuranceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBidInsuranceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInsuranceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInsuranceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInsuranceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInsuranceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInsuranceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInsuranceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondInsurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondInsurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondInsurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveChunkId", wireType)
			}
			m.AliveChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AliveChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondInsuranceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondInsuranceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondInsuranceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondRequestId", wireType)
			}
			m.UnbondRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInsuranceUnbond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInsuranceUnbond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInsuranceUnbond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondRequestId", wireType)
			}
			m.UnbondRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInsuranceUnbondResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInsuranceUnbondResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInsuranceUnbondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
