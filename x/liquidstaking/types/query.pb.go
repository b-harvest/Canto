// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryLiquidValidatorsRequest struct {
}

func (m *QueryLiquidValidatorsRequest) Reset()         { *m = QueryLiquidValidatorsRequest{} }
func (m *QueryLiquidValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsRequest) ProtoMessage()    {}
func (*QueryLiquidValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{2}
}
func (m *QueryLiquidValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsRequest.Merge(m, src)
}
func (m *QueryLiquidValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsRequest proto.InternalMessageInfo

type QueryLiquidValidatorsResponse struct {
	LiquidValidators []LiquidValidatorState `protobuf:"bytes,1,rep,name=liquid_validators,json=liquidValidators,proto3" json:"liquid_validators"`
}

func (m *QueryLiquidValidatorsResponse) Reset()         { *m = QueryLiquidValidatorsResponse{} }
func (m *QueryLiquidValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsResponse) ProtoMessage()    {}
func (*QueryLiquidValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{3}
}
func (m *QueryLiquidValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsResponse.Merge(m, src)
}
func (m *QueryLiquidValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsResponse proto.InternalMessageInfo

func (m *QueryLiquidValidatorsResponse) GetLiquidValidators() []LiquidValidatorState {
	if m != nil {
		return m.LiquidValidators
	}
	return nil
}

type QueryLiquidStakingStateRequest struct {
}

func (m *QueryLiquidStakingStateRequest) Reset()         { *m = QueryLiquidStakingStateRequest{} }
func (m *QueryLiquidStakingStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingStateRequest) ProtoMessage()    {}
func (*QueryLiquidStakingStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{4}
}
func (m *QueryLiquidStakingStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingStateRequest.Merge(m, src)
}
func (m *QueryLiquidStakingStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingStateRequest proto.InternalMessageInfo

type QueryLiquidStakingStateResponse struct {
}

func (m *QueryLiquidStakingStateResponse) Reset()         { *m = QueryLiquidStakingStateResponse{} }
func (m *QueryLiquidStakingStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingStateResponse) ProtoMessage()    {}
func (*QueryLiquidStakingStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{5}
}
func (m *QueryLiquidStakingStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingStateResponse.Merge(m, src)
}
func (m *QueryLiquidStakingStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingStateResponse proto.InternalMessageInfo

type QueryAliveChunksRequest struct {
}

func (m *QueryAliveChunksRequest) Reset()         { *m = QueryAliveChunksRequest{} }
func (m *QueryAliveChunksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunksRequest) ProtoMessage()    {}
func (*QueryAliveChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{6}
}
func (m *QueryAliveChunksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksRequest.Merge(m, src)
}
func (m *QueryAliveChunksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksRequest proto.InternalMessageInfo

type QueryAliveChunksResponse struct {
}

func (m *QueryAliveChunksResponse) Reset()         { *m = QueryAliveChunksResponse{} }
func (m *QueryAliveChunksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunksResponse) ProtoMessage()    {}
func (*QueryAliveChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{7}
}
func (m *QueryAliveChunksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksResponse.Merge(m, src)
}
func (m *QueryAliveChunksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksResponse proto.InternalMessageInfo

type QueryUnbondingChunksRequest struct {
}

func (m *QueryUnbondingChunksRequest) Reset()         { *m = QueryUnbondingChunksRequest{} }
func (m *QueryUnbondingChunksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingChunksRequest) ProtoMessage()    {}
func (*QueryUnbondingChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{8}
}
func (m *QueryUnbondingChunksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingChunksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingChunksRequest.Merge(m, src)
}
func (m *QueryUnbondingChunksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingChunksRequest proto.InternalMessageInfo

type QueryUnbondingChunksResponse struct {
}

func (m *QueryUnbondingChunksResponse) Reset()         { *m = QueryUnbondingChunksResponse{} }
func (m *QueryUnbondingChunksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingChunksResponse) ProtoMessage()    {}
func (*QueryUnbondingChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{9}
}
func (m *QueryUnbondingChunksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingChunksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingChunksResponse.Merge(m, src)
}
func (m *QueryUnbondingChunksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingChunksResponse proto.InternalMessageInfo

type QueryChunkBondRequests struct {
}

func (m *QueryChunkBondRequests) Reset()         { *m = QueryChunkBondRequests{} }
func (m *QueryChunkBondRequests) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequests) ProtoMessage()    {}
func (*QueryChunkBondRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{10}
}
func (m *QueryChunkBondRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequests.Merge(m, src)
}
func (m *QueryChunkBondRequests) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequests.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequests proto.InternalMessageInfo

type QueryChunkBondRequestsResponse struct {
}

func (m *QueryChunkBondRequestsResponse) Reset()         { *m = QueryChunkBondRequestsResponse{} }
func (m *QueryChunkBondRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestsResponse) ProtoMessage()    {}
func (*QueryChunkBondRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{11}
}
func (m *QueryChunkBondRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestsResponse.Merge(m, src)
}
func (m *QueryChunkBondRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestsResponse proto.InternalMessageInfo

type QueryChunkUnbondRequests struct {
}

func (m *QueryChunkUnbondRequests) Reset()         { *m = QueryChunkUnbondRequests{} }
func (m *QueryChunkUnbondRequests) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequests) ProtoMessage()    {}
func (*QueryChunkUnbondRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{12}
}
func (m *QueryChunkUnbondRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequests.Merge(m, src)
}
func (m *QueryChunkUnbondRequests) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequests.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequests proto.InternalMessageInfo

type QueryChunkUnbondRequestsResponse struct {
}

func (m *QueryChunkUnbondRequestsResponse) Reset()         { *m = QueryChunkUnbondRequestsResponse{} }
func (m *QueryChunkUnbondRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequestsResponse) ProtoMessage()    {}
func (*QueryChunkUnbondRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{13}
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestsResponse.Merge(m, src)
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestsResponse proto.InternalMessageInfo

type QueryInsuranceBidRequest struct {
}

func (m *QueryInsuranceBidRequest) Reset()         { *m = QueryInsuranceBidRequest{} }
func (m *QueryInsuranceBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidRequest) ProtoMessage()    {}
func (*QueryInsuranceBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{14}
}
func (m *QueryInsuranceBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidRequest.Merge(m, src)
}
func (m *QueryInsuranceBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidRequest proto.InternalMessageInfo

type QueryInsuranceBidResponse struct {
}

func (m *QueryInsuranceBidResponse) Reset()         { *m = QueryInsuranceBidResponse{} }
func (m *QueryInsuranceBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidResponse) ProtoMessage()    {}
func (*QueryInsuranceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{15}
}
func (m *QueryInsuranceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidResponse.Merge(m, src)
}
func (m *QueryInsuranceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.liquidstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.liquidstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryLiquidValidatorsRequest)(nil), "canto.liquidstaking.v1.QueryLiquidValidatorsRequest")
	proto.RegisterType((*QueryLiquidValidatorsResponse)(nil), "canto.liquidstaking.v1.QueryLiquidValidatorsResponse")
	proto.RegisterType((*QueryLiquidStakingStateRequest)(nil), "canto.liquidstaking.v1.QueryLiquidStakingStateRequest")
	proto.RegisterType((*QueryLiquidStakingStateResponse)(nil), "canto.liquidstaking.v1.QueryLiquidStakingStateResponse")
	proto.RegisterType((*QueryAliveChunksRequest)(nil), "canto.liquidstaking.v1.QueryAliveChunksRequest")
	proto.RegisterType((*QueryAliveChunksResponse)(nil), "canto.liquidstaking.v1.QueryAliveChunksResponse")
	proto.RegisterType((*QueryUnbondingChunksRequest)(nil), "canto.liquidstaking.v1.QueryUnbondingChunksRequest")
	proto.RegisterType((*QueryUnbondingChunksResponse)(nil), "canto.liquidstaking.v1.QueryUnbondingChunksResponse")
	proto.RegisterType((*QueryChunkBondRequests)(nil), "canto.liquidstaking.v1.QueryChunkBondRequests")
	proto.RegisterType((*QueryChunkBondRequestsResponse)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestsResponse")
	proto.RegisterType((*QueryChunkUnbondRequests)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequests")
	proto.RegisterType((*QueryChunkUnbondRequestsResponse)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestsResponse")
	proto.RegisterType((*QueryInsuranceBidRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceBidRequest")
	proto.RegisterType((*QueryInsuranceBidResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceBidResponse")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/query.proto", fileDescriptor_a04856e9492a9fb6)
}

var fileDescriptor_a04856e9492a9fb6 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xfc, 0xe8, 0xf0, 0x2a, 0x44, 0x7b, 0xad, 0x4a, 0xea, 0xb6, 0x6e, 0x30, 0x50,
	0x4a, 0xdb, 0xd8, 0x4d, 0xfa, 0x03, 0x06, 0x16, 0xd2, 0x09, 0x09, 0x21, 0x68, 0x81, 0x01, 0x21,
	0x45, 0x4e, 0x72, 0x72, 0xad, 0xa6, 0x77, 0xa9, 0x7d, 0x0e, 0x74, 0x43, 0x6c, 0x6c, 0x48, 0xec,
	0x2c, 0xec, 0x08, 0x31, 0x21, 0xf1, 0x0f, 0x74, 0xac, 0xc4, 0xc2, 0x84, 0x50, 0xcb, 0xc8, 0x1f,
	0x81, 0x7c, 0x3e, 0xbb, 0x49, 0x9c, 0x73, 0x93, 0x29, 0xce, 0xbd, 0xef, 0xf7, 0x7d, 0x3f, 0x76,
	0xde, 0xb3, 0x02, 0x46, 0xdd, 0xa6, 0x9c, 0x59, 0x4d, 0xf7, 0x20, 0x70, 0x1b, 0x3e, 0xb7, 0xf7,
	0x5c, 0xea, 0x58, 0xed, 0x92, 0x75, 0x10, 0x10, 0xef, 0xd0, 0x6c, 0x79, 0x8c, 0x33, 0x3c, 0x25,
	0x34, 0x66, 0x97, 0xc6, 0x6c, 0x97, 0xb4, 0x59, 0x87, 0x31, 0xa7, 0x49, 0x2c, 0xbb, 0xe5, 0x5a,
	0x36, 0xa5, 0x8c, 0xdb, 0xdc, 0x65, 0xd4, 0x8f, 0x5c, 0xda, 0xa4, 0xc3, 0x1c, 0x26, 0x2e, 0xad,
	0xf0, 0x4a, 0x9e, 0xde, 0x50, 0xe4, 0xb5, 0x6c, 0xcf, 0xde, 0x8f, 0xad, 0x4b, 0x0a, 0x51, 0x37,
	0x81, 0xd0, 0x1a, 0x93, 0x80, 0x9f, 0x86, 0xac, 0x4f, 0x44, 0x83, 0x6d, 0x72, 0x10, 0x10, 0x9f,
	0x1b, 0x3b, 0x30, 0xd1, 0x75, 0xea, 0xb7, 0x18, 0xf5, 0x09, 0xbe, 0x0f, 0x23, 0x51, 0x50, 0x1e,
	0x15, 0xd0, 0xe2, 0x68, 0x59, 0x37, 0xfb, 0xdf, 0x9a, 0x19, 0xf9, 0x2a, 0x97, 0x8e, 0x7e, 0xcf,
	0xe7, 0xb6, 0xa5, 0xc7, 0xd0, 0x61, 0x56, 0x34, 0x7d, 0x24, 0xd4, 0x2f, 0xec, 0xa6, 0xdb, 0xb0,
	0x39, 0xf3, 0x92, 0xd0, 0xb7, 0x08, 0xe6, 0x14, 0x02, 0x99, 0x5f, 0x85, 0xf1, 0x28, 0xaa, 0xda,
	0x4e, 0x8a, 0x79, 0x54, 0xb8, 0xb8, 0x38, 0x5a, 0x5e, 0x51, 0xa1, 0xf4, 0x34, 0xdb, 0xe1, 0x36,
	0x27, 0x12, 0x6c, 0xac, 0xd9, 0x13, 0x64, 0x14, 0x40, 0xef, 0x20, 0xd8, 0x89, 0xba, 0x08, 0x4b,
	0x0c, 0x79, 0x1d, 0xe6, 0x95, 0x8a, 0x88, 0xd2, 0x98, 0x86, 0x6b, 0x42, 0xf2, 0xa0, 0xe9, 0xb6,
	0xc9, 0xd6, 0x6e, 0x40, 0xf7, 0x92, 0x5b, 0xd4, 0x20, 0x9f, 0x2e, 0x49, 0xdb, 0x1c, 0xcc, 0x88,
	0xda, 0x73, 0x5a, 0x63, 0xb4, 0xe1, 0x52, 0xa7, 0xdb, 0x1a, 0x3f, 0xbd, 0x54, 0x59, 0xda, 0xf3,
	0x30, 0x25, 0xea, 0xe2, 0xb8, 0xc2, 0x68, 0x43, 0x1a, 0xcf, 0x6e, 0x2a, 0x55, 0x49, 0xbc, 0x31,
	0x96, 0x50, 0x44, 0x01, 0x89, 0xdb, 0x80, 0x82, 0xaa, 0x96, 0xf2, 0x3f, 0xa4, 0x7e, 0xe0, 0xd9,
	0xb4, 0x4e, 0x2a, 0x6e, 0x2c, 0x32, 0x66, 0x60, 0xba, 0x4f, 0x2d, 0x32, 0x96, 0xff, 0x01, 0x5c,
	0x16, 0x55, 0xfc, 0x1e, 0xc1, 0x48, 0x34, 0x35, 0x78, 0x49, 0xf5, 0x53, 0xa6, 0x07, 0x55, 0x5b,
	0x1e, 0x48, 0x2b, 0x31, 0x17, 0xde, 0xfd, 0xfc, 0xfb, 0xf1, 0x42, 0x01, 0xeb, 0x56, 0xe6, 0x16,
	0xe1, 0x6f, 0x08, 0xc6, 0x7a, 0x67, 0x10, 0xaf, 0x67, 0x26, 0x29, 0x66, 0x5a, 0xdb, 0x18, 0xd2,
	0x25, 0x49, 0x4b, 0x82, 0x74, 0x19, 0xdf, 0xb1, 0x32, 0x57, 0xb9, 0x63, 0x0d, 0xf0, 0x0f, 0x04,
	0x38, 0x3d, 0x94, 0x78, 0x73, 0x00, 0x80, 0x3e, 0x73, 0xae, 0xdd, 0x1d, 0xda, 0x27, 0xd1, 0xd7,
	0x05, 0xba, 0x89, 0x57, 0xce, 0x41, 0x97, 0x27, 0xe1, 0x27, 0x27, 0xf8, 0x13, 0x82, 0xd1, 0x8e,
	0xa5, 0xc0, 0x56, 0x66, 0x7c, 0x7a, 0xb3, 0xb4, 0xd5, 0xc1, 0x0d, 0x12, 0x74, 0x45, 0x80, 0x2e,
	0xe0, 0x9b, 0x2a, 0x50, 0x3b, 0x34, 0x55, 0xeb, 0x11, 0xd0, 0x17, 0x04, 0x57, 0x7b, 0x56, 0x0f,
	0xaf, 0x65, 0x66, 0xf6, 0xdf, 0x63, 0x6d, 0x7d, 0x38, 0x93, 0x84, 0x5d, 0x15, 0xb0, 0x4b, 0x78,
	0x51, 0x05, 0x1b, 0xc4, 0xc6, 0x18, 0xf8, 0x2b, 0x82, 0xf1, 0xd4, 0xc6, 0x63, 0x33, 0x33, 0x3d,
	0xa5, 0xd7, 0x36, 0x87, 0xd3, 0x27, 0xbc, 0x6b, 0x82, 0xb7, 0x88, 0x97, 0x55, 0xbc, 0x82, 0xb2,
	0x1a, 0x32, 0x57, 0xbd, 0x18, 0xee, 0x3b, 0x82, 0x89, 0x3e, 0xaf, 0x19, 0xbc, 0x7a, 0x3e, 0x44,
	0xb7, 0x43, 0xbb, 0x37, 0xac, 0x23, 0x01, 0xdf, 0x10, 0xe0, 0x16, 0x2e, 0x66, 0x83, 0x47, 0x8f,
	0xfb, 0x0c, 0xfd, 0x33, 0x82, 0x2b, 0x9d, 0x6f, 0xb8, 0xf3, 0xa0, 0xfb, 0xbc, 0x29, 0xb5, 0xd2,
	0x10, 0x0e, 0x49, 0x5b, 0x14, 0xb4, 0xb7, 0xf1, 0x2d, 0x15, 0xad, 0x1b, 0xbb, 0xaa, 0x35, 0xb7,
	0x51, 0x79, 0x75, 0x74, 0xa2, 0xa3, 0xe3, 0x13, 0x1d, 0xfd, 0x39, 0xd1, 0xd1, 0x87, 0x53, 0x3d,
	0x77, 0x7c, 0xaa, 0xe7, 0x7e, 0x9d, 0xea, 0xb9, 0x97, 0x15, 0xc7, 0xe5, 0xbb, 0x41, 0xcd, 0xac,
	0xb3, 0x7d, 0x6b, 0x2b, 0x6c, 0x55, 0x7c, 0x4c, 0xf8, 0x6b, 0xe6, 0xed, 0xc9, 0x6f, 0xcf, 0x88,
	0xcf, 0x29, 0xe1, 0xc5, 0x76, 0x39, 0xec, 0xfa, 0xa6, 0x27, 0x88, 0x1f, 0xb6, 0x88, 0x5f, 0x1b,
	0x11, 0xff, 0x28, 0xd6, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x57, 0x03, 0x49, 0x25, 0x14, 0x09,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TBD
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TBD
	LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error)
	// TRD
	LiquidStakingState(ctx context.Context, in *QueryLiquidStakingStateRequest, opts ...grpc.CallOption) (*QueryLiquidStakingStateResponse, error)
	// TBD
	AliveChunks(ctx context.Context, in *QueryAliveChunksRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error)
	// TBD
	UnbondingChunks(ctx context.Context, in *QueryUnbondingChunksRequest, opts ...grpc.CallOption) (*QueryUnbondingChunksResponse, error)
	// TBD
	ChunkBondRequests(ctx context.Context, in *QueryChunkBondRequests, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkUnbondRequests(ctx context.Context, in *QueryChunkUnbondRequests, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	InsuranceBids(ctx context.Context, in *QueryInsuranceBidRequest, opts ...grpc.CallOption) (*QueryInsuranceBidResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error) {
	out := new(QueryLiquidValidatorsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/LiquidValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidStakingState(ctx context.Context, in *QueryLiquidStakingStateRequest, opts ...grpc.CallOption) (*QueryLiquidStakingStateResponse, error) {
	out := new(QueryLiquidStakingStateResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/LiquidStakingState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliveChunks(ctx context.Context, in *QueryAliveChunksRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error) {
	out := new(QueryAliveChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/AliveChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingChunks(ctx context.Context, in *QueryUnbondingChunksRequest, opts ...grpc.CallOption) (*QueryUnbondingChunksResponse, error) {
	out := new(QueryUnbondingChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/UnbondingChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkBondRequests(ctx context.Context, in *QueryChunkBondRequests, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error) {
	out := new(QueryChunkBondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkBondRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkUnbondRequests(ctx context.Context, in *QueryChunkUnbondRequests, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error) {
	out := new(QueryChunkUnbondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkUnbondRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceBids(ctx context.Context, in *QueryInsuranceBidRequest, opts ...grpc.CallOption) (*QueryInsuranceBidResponse, error) {
	out := new(QueryInsuranceBidResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TBD
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TBD
	LiquidValidators(context.Context, *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error)
	// TRD
	LiquidStakingState(context.Context, *QueryLiquidStakingStateRequest) (*QueryLiquidStakingStateResponse, error)
	// TBD
	AliveChunks(context.Context, *QueryAliveChunksRequest) (*QueryAliveChunksResponse, error)
	// TBD
	UnbondingChunks(context.Context, *QueryUnbondingChunksRequest) (*QueryUnbondingChunksResponse, error)
	// TBD
	ChunkBondRequests(context.Context, *QueryChunkBondRequests) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkUnbondRequests(context.Context, *QueryChunkUnbondRequests) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	InsuranceBids(context.Context, *QueryInsuranceBidRequest) (*QueryInsuranceBidResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LiquidValidators(ctx context.Context, req *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidValidators not implemented")
}
func (*UnimplementedQueryServer) LiquidStakingState(ctx context.Context, req *QueryLiquidStakingStateRequest) (*QueryLiquidStakingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidStakingState not implemented")
}
func (*UnimplementedQueryServer) AliveChunks(ctx context.Context, req *QueryAliveChunksRequest) (*QueryAliveChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveChunks not implemented")
}
func (*UnimplementedQueryServer) UnbondingChunks(ctx context.Context, req *QueryUnbondingChunksRequest) (*QueryUnbondingChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingChunks not implemented")
}
func (*UnimplementedQueryServer) ChunkBondRequests(ctx context.Context, req *QueryChunkBondRequests) (*QueryChunkBondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkBondRequests not implemented")
}
func (*UnimplementedQueryServer) ChunkUnbondRequests(ctx context.Context, req *QueryChunkUnbondRequests) (*QueryChunkUnbondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkUnbondRequests not implemented")
}
func (*UnimplementedQueryServer) InsuranceBids(ctx context.Context, req *QueryInsuranceBidRequest) (*QueryInsuranceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceBids not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/LiquidValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidValidators(ctx, req.(*QueryLiquidValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidStakingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidStakingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidStakingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/LiquidStakingState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidStakingState(ctx, req.(*QueryLiquidStakingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliveChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliveChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliveChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/AliveChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliveChunks(ctx, req.(*QueryAliveChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondingChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/UnbondingChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingChunks(ctx, req.(*QueryUnbondingChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkBondRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkBondRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkBondRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkBondRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkBondRequests(ctx, req.(*QueryChunkBondRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkUnbondRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkUnbondRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkUnbondRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkUnbondRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkUnbondRequests(ctx, req.(*QueryChunkUnbondRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceBids(ctx, req.(*QueryInsuranceBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.liquidstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LiquidValidators",
			Handler:    _Query_LiquidValidators_Handler,
		},
		{
			MethodName: "LiquidStakingState",
			Handler:    _Query_LiquidStakingState_Handler,
		},
		{
			MethodName: "AliveChunks",
			Handler:    _Query_AliveChunks_Handler,
		},
		{
			MethodName: "UnbondingChunks",
			Handler:    _Query_UnbondingChunks_Handler,
		},
		{
			MethodName: "ChunkBondRequests",
			Handler:    _Query_ChunkBondRequests_Handler,
		},
		{
			MethodName: "ChunkUnbondRequests",
			Handler:    _Query_ChunkUnbondRequests_Handler,
		},
		{
			MethodName: "InsuranceBids",
			Handler:    _Query_InsuranceBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/liquidstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidValidators) > 0 {
		for iNdEx := len(m.LiquidValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingChunksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingChunksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingChunksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingChunksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingChunksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingChunksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidValidators) > 0 {
		for _, e := range m.LiquidValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidStakingStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidStakingStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAliveChunksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAliveChunksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUnbondingChunksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUnbondingChunksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkBondRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkBondRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkUnbondRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkUnbondRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInsuranceBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInsuranceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidValidators = append(m.LiquidValidators, LiquidValidatorState{})
			if err := m.LiquidValidators[len(m.LiquidValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingChunksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingChunksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingChunksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingChunksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingChunksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingChunksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
