// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryLiquidValidatorsRequest struct {
}

func (m *QueryLiquidValidatorsRequest) Reset()         { *m = QueryLiquidValidatorsRequest{} }
func (m *QueryLiquidValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsRequest) ProtoMessage()    {}
func (*QueryLiquidValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{2}
}
func (m *QueryLiquidValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsRequest.Merge(m, src)
}
func (m *QueryLiquidValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsRequest proto.InternalMessageInfo

type QueryLiquidValidatorsResponse struct {
	LiquidValidators []LiquidValidatorState `protobuf:"bytes,1,rep,name=liquid_validators,json=liquidValidators,proto3" json:"liquid_validators"`
}

func (m *QueryLiquidValidatorsResponse) Reset()         { *m = QueryLiquidValidatorsResponse{} }
func (m *QueryLiquidValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsResponse) ProtoMessage()    {}
func (*QueryLiquidValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{3}
}
func (m *QueryLiquidValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsResponse.Merge(m, src)
}
func (m *QueryLiquidValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsResponse proto.InternalMessageInfo

func (m *QueryLiquidValidatorsResponse) GetLiquidValidators() []LiquidValidatorState {
	if m != nil {
		return m.LiquidValidators
	}
	return nil
}

type QueryLiquidStakingStateRequest struct {
}

func (m *QueryLiquidStakingStateRequest) Reset()         { *m = QueryLiquidStakingStateRequest{} }
func (m *QueryLiquidStakingStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingStateRequest) ProtoMessage()    {}
func (*QueryLiquidStakingStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{4}
}
func (m *QueryLiquidStakingStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingStateRequest.Merge(m, src)
}
func (m *QueryLiquidStakingStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingStateRequest proto.InternalMessageInfo

type QueryLiquidStakingStateResponse struct {
}

func (m *QueryLiquidStakingStateResponse) Reset()         { *m = QueryLiquidStakingStateResponse{} }
func (m *QueryLiquidStakingStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidStakingStateResponse) ProtoMessage()    {}
func (*QueryLiquidStakingStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{5}
}
func (m *QueryLiquidStakingStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidStakingStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidStakingStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidStakingStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidStakingStateResponse.Merge(m, src)
}
func (m *QueryLiquidStakingStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidStakingStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidStakingStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidStakingStateResponse proto.InternalMessageInfo

type QueryAliveChunkRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAliveChunkRequest) Reset()         { *m = QueryAliveChunkRequest{} }
func (m *QueryAliveChunkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunkRequest) ProtoMessage()    {}
func (*QueryAliveChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{6}
}
func (m *QueryAliveChunkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunkRequest.Merge(m, src)
}
func (m *QueryAliveChunkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunkRequest proto.InternalMessageInfo

func (m *QueryAliveChunkRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryAliveChunkResponse struct {
	AliveChunk AliveChunk `protobuf:"bytes,1,opt,name=alive_chunk,json=aliveChunk,proto3" json:"alive_chunk"`
}

func (m *QueryAliveChunkResponse) Reset()         { *m = QueryAliveChunkResponse{} }
func (m *QueryAliveChunkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunkResponse) ProtoMessage()    {}
func (*QueryAliveChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{7}
}
func (m *QueryAliveChunkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunkResponse.Merge(m, src)
}
func (m *QueryAliveChunkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunkResponse proto.InternalMessageInfo

func (m *QueryAliveChunkResponse) GetAliveChunk() AliveChunk {
	if m != nil {
		return m.AliveChunk
	}
	return AliveChunk{}
}

type QueryAliveChunksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAliveChunksRequest) Reset()         { *m = QueryAliveChunksRequest{} }
func (m *QueryAliveChunksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunksRequest) ProtoMessage()    {}
func (*QueryAliveChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{8}
}
func (m *QueryAliveChunksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksRequest.Merge(m, src)
}
func (m *QueryAliveChunksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksRequest proto.InternalMessageInfo

func (m *QueryAliveChunksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAliveChunksByInsuranceProviderRequest struct {
	InsuranceProviderAddr string             `protobuf:"bytes,1,opt,name=insurance_provider_addr,json=insuranceProviderAddr,proto3" json:"insurance_provider_addr,omitempty"`
	Pagination            *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAliveChunksByInsuranceProviderRequest) Reset() {
	*m = QueryAliveChunksByInsuranceProviderRequest{}
}
func (m *QueryAliveChunksByInsuranceProviderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAliveChunksByInsuranceProviderRequest) ProtoMessage() {}
func (*QueryAliveChunksByInsuranceProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{9}
}
func (m *QueryAliveChunksByInsuranceProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksByInsuranceProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksByInsuranceProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksByInsuranceProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksByInsuranceProviderRequest.Merge(m, src)
}
func (m *QueryAliveChunksByInsuranceProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksByInsuranceProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksByInsuranceProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksByInsuranceProviderRequest proto.InternalMessageInfo

func (m *QueryAliveChunksByInsuranceProviderRequest) GetInsuranceProviderAddr() string {
	if m != nil {
		return m.InsuranceProviderAddr
	}
	return ""
}

func (m *QueryAliveChunksByInsuranceProviderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAliveChunksByValidatorRequest struct {
	ValidatorAddr string             `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAliveChunksByValidatorRequest) Reset()         { *m = QueryAliveChunksByValidatorRequest{} }
func (m *QueryAliveChunksByValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunksByValidatorRequest) ProtoMessage()    {}
func (*QueryAliveChunksByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{10}
}
func (m *QueryAliveChunksByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksByValidatorRequest.Merge(m, src)
}
func (m *QueryAliveChunksByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksByValidatorRequest proto.InternalMessageInfo

func (m *QueryAliveChunksByValidatorRequest) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *QueryAliveChunksByValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAliveChunksResponse struct {
	AliveChunk []AliveChunk        `protobuf:"bytes,1,rep,name=alive_chunk,json=aliveChunk,proto3" json:"alive_chunk"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAliveChunksResponse) Reset()         { *m = QueryAliveChunksResponse{} }
func (m *QueryAliveChunksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAliveChunksResponse) ProtoMessage()    {}
func (*QueryAliveChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{11}
}
func (m *QueryAliveChunksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliveChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliveChunksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliveChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliveChunksResponse.Merge(m, src)
}
func (m *QueryAliveChunksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliveChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliveChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliveChunksResponse proto.InternalMessageInfo

func (m *QueryAliveChunksResponse) GetAliveChunk() []AliveChunk {
	if m != nil {
		return m.AliveChunk
	}
	return nil
}

func (m *QueryAliveChunksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUnbondingChunksRequest struct {
}

func (m *QueryUnbondingChunksRequest) Reset()         { *m = QueryUnbondingChunksRequest{} }
func (m *QueryUnbondingChunksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingChunksRequest) ProtoMessage()    {}
func (*QueryUnbondingChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{12}
}
func (m *QueryUnbondingChunksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingChunksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingChunksRequest.Merge(m, src)
}
func (m *QueryUnbondingChunksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingChunksRequest proto.InternalMessageInfo

type QueryUnbondingChunksResponse struct {
}

func (m *QueryUnbondingChunksResponse) Reset()         { *m = QueryUnbondingChunksResponse{} }
func (m *QueryUnbondingChunksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingChunksResponse) ProtoMessage()    {}
func (*QueryUnbondingChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{13}
}
func (m *QueryUnbondingChunksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingChunksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingChunksResponse.Merge(m, src)
}
func (m *QueryUnbondingChunksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingChunksResponse proto.InternalMessageInfo

type QueryChunkBondRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryChunkBondRequestRequest) Reset()         { *m = QueryChunkBondRequestRequest{} }
func (m *QueryChunkBondRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestRequest) ProtoMessage()    {}
func (*QueryChunkBondRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{14}
}
func (m *QueryChunkBondRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestRequest.Merge(m, src)
}
func (m *QueryChunkBondRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestRequest proto.InternalMessageInfo

func (m *QueryChunkBondRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryChunkBondRequestResponse struct {
	ChunkBondRequests ChunkBondRequest `protobuf:"bytes,1,opt,name=chunk_bond_requests,json=chunkBondRequests,proto3" json:"chunk_bond_requests"`
}

func (m *QueryChunkBondRequestResponse) Reset()         { *m = QueryChunkBondRequestResponse{} }
func (m *QueryChunkBondRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestResponse) ProtoMessage()    {}
func (*QueryChunkBondRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{15}
}
func (m *QueryChunkBondRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestResponse.Merge(m, src)
}
func (m *QueryChunkBondRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestResponse proto.InternalMessageInfo

func (m *QueryChunkBondRequestResponse) GetChunkBondRequests() ChunkBondRequest {
	if m != nil {
		return m.ChunkBondRequests
	}
	return ChunkBondRequest{}
}

type QueryChunkBondRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkBondRequestsRequest) Reset()         { *m = QueryChunkBondRequestsRequest{} }
func (m *QueryChunkBondRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestsRequest) ProtoMessage()    {}
func (*QueryChunkBondRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{16}
}
func (m *QueryChunkBondRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestsRequest.Merge(m, src)
}
func (m *QueryChunkBondRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestsRequest proto.InternalMessageInfo

func (m *QueryChunkBondRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkBondRequestsByDelegatorRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkBondRequestsByDelegatorRequest) Reset() {
	*m = QueryChunkBondRequestsByDelegatorRequest{}
}
func (m *QueryChunkBondRequestsByDelegatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestsByDelegatorRequest) ProtoMessage()    {}
func (*QueryChunkBondRequestsByDelegatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{17}
}
func (m *QueryChunkBondRequestsByDelegatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestsByDelegatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestsByDelegatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestsByDelegatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestsByDelegatorRequest.Merge(m, src)
}
func (m *QueryChunkBondRequestsByDelegatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestsByDelegatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestsByDelegatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestsByDelegatorRequest proto.InternalMessageInfo

func (m *QueryChunkBondRequestsByDelegatorRequest) GetDelegatorAddr() string {
	if m != nil {
		return m.DelegatorAddr
	}
	return ""
}

func (m *QueryChunkBondRequestsByDelegatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkBondRequestsResponse struct {
	ChunkBondRequests []ChunkBondRequest  `protobuf:"bytes,1,rep,name=chunk_bond_requests,json=chunkBondRequests,proto3" json:"chunk_bond_requests"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkBondRequestsResponse) Reset()         { *m = QueryChunkBondRequestsResponse{} }
func (m *QueryChunkBondRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkBondRequestsResponse) ProtoMessage()    {}
func (*QueryChunkBondRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{18}
}
func (m *QueryChunkBondRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkBondRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkBondRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkBondRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkBondRequestsResponse.Merge(m, src)
}
func (m *QueryChunkBondRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkBondRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkBondRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkBondRequestsResponse proto.InternalMessageInfo

func (m *QueryChunkBondRequestsResponse) GetChunkBondRequests() []ChunkBondRequest {
	if m != nil {
		return m.ChunkBondRequests
	}
	return nil
}

func (m *QueryChunkBondRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkUnbondRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryChunkUnbondRequestRequest) Reset()         { *m = QueryChunkUnbondRequestRequest{} }
func (m *QueryChunkUnbondRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequestRequest) ProtoMessage()    {}
func (*QueryChunkUnbondRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{19}
}
func (m *QueryChunkUnbondRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestRequest.Merge(m, src)
}
func (m *QueryChunkUnbondRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestRequest proto.InternalMessageInfo

func (m *QueryChunkUnbondRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryChunkUnbondRequestResponse struct {
	ChunkUnbondRequest *ChunkUnbondRequest `protobuf:"bytes,1,opt,name=chunk_unbond_request,json=chunkUnbondRequest,proto3" json:"chunk_unbond_request,omitempty"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkUnbondRequestResponse) Reset()         { *m = QueryChunkUnbondRequestResponse{} }
func (m *QueryChunkUnbondRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequestResponse) ProtoMessage()    {}
func (*QueryChunkUnbondRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{20}
}
func (m *QueryChunkUnbondRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestResponse.Merge(m, src)
}
func (m *QueryChunkUnbondRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestResponse proto.InternalMessageInfo

func (m *QueryChunkUnbondRequestResponse) GetChunkUnbondRequest() *ChunkUnbondRequest {
	if m != nil {
		return m.ChunkUnbondRequest
	}
	return nil
}

func (m *QueryChunkUnbondRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkUnbondRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkUnbondRequestsRequest) Reset()         { *m = QueryChunkUnbondRequestsRequest{} }
func (m *QueryChunkUnbondRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequestsRequest) ProtoMessage()    {}
func (*QueryChunkUnbondRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{21}
}
func (m *QueryChunkUnbondRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestsRequest.Merge(m, src)
}
func (m *QueryChunkUnbondRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestsRequest proto.InternalMessageInfo

func (m *QueryChunkUnbondRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkUnbondRequestsByUndelegatorRequest struct {
	UndelegatorAddr string             `protobuf:"bytes,1,opt,name=undelegator_addr,json=undelegatorAddr,proto3" json:"undelegator_addr,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) Reset() {
	*m = QueryChunkUnbondRequestsByUndelegatorRequest{}
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryChunkUnbondRequestsByUndelegatorRequest) ProtoMessage() {}
func (*QueryChunkUnbondRequestsByUndelegatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{22}
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestsByUndelegatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestsByUndelegatorRequest.Merge(m, src)
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestsByUndelegatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestsByUndelegatorRequest proto.InternalMessageInfo

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) GetUndelegatorAddr() string {
	if m != nil {
		return m.UndelegatorAddr
	}
	return ""
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkUnbondRequestsResponse struct {
	ChunkUnbondRequests []ChunkUnbondRequest `protobuf:"bytes,1,rep,name=chunk_unbond_requests,json=chunkUnbondRequests,proto3" json:"chunk_unbond_requests"`
	Pagination          *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunkUnbondRequestsResponse) Reset()         { *m = QueryChunkUnbondRequestsResponse{} }
func (m *QueryChunkUnbondRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkUnbondRequestsResponse) ProtoMessage()    {}
func (*QueryChunkUnbondRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{23}
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkUnbondRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkUnbondRequestsResponse.Merge(m, src)
}
func (m *QueryChunkUnbondRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkUnbondRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkUnbondRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkUnbondRequestsResponse proto.InternalMessageInfo

func (m *QueryChunkUnbondRequestsResponse) GetChunkUnbondRequests() []ChunkUnbondRequest {
	if m != nil {
		return m.ChunkUnbondRequests
	}
	return nil
}

func (m *QueryChunkUnbondRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceBidRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryInsuranceBidRequest) Reset()         { *m = QueryInsuranceBidRequest{} }
func (m *QueryInsuranceBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidRequest) ProtoMessage()    {}
func (*QueryInsuranceBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{24}
}
func (m *QueryInsuranceBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidRequest.Merge(m, src)
}
func (m *QueryInsuranceBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidRequest proto.InternalMessageInfo

func (m *QueryInsuranceBidRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryInsuranceBidResponse struct {
	InsuranceBid InsuranceBid `protobuf:"bytes,1,opt,name=insurance_bid,json=insuranceBid,proto3" json:"insurance_bid"`
}

func (m *QueryInsuranceBidResponse) Reset()         { *m = QueryInsuranceBidResponse{} }
func (m *QueryInsuranceBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidResponse) ProtoMessage()    {}
func (*QueryInsuranceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{25}
}
func (m *QueryInsuranceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidResponse.Merge(m, src)
}
func (m *QueryInsuranceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidResponse proto.InternalMessageInfo

func (m *QueryInsuranceBidResponse) GetInsuranceBid() InsuranceBid {
	if m != nil {
		return m.InsuranceBid
	}
	return InsuranceBid{}
}

type QueryInsuranceBidsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceBidsRequest) Reset()         { *m = QueryInsuranceBidsRequest{} }
func (m *QueryInsuranceBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidsRequest) ProtoMessage()    {}
func (*QueryInsuranceBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{26}
}
func (m *QueryInsuranceBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidsRequest.Merge(m, src)
}
func (m *QueryInsuranceBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidsRequest proto.InternalMessageInfo

func (m *QueryInsuranceBidsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceBidsByInsuranceProviderRequest struct {
	InsuranceProviderAddr string             `protobuf:"bytes,1,opt,name=insurance_provider_addr,json=insuranceProviderAddr,proto3" json:"insurance_provider_addr,omitempty"`
	Pagination            *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) Reset() {
	*m = QueryInsuranceBidsByInsuranceProviderRequest{}
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInsuranceBidsByInsuranceProviderRequest) ProtoMessage() {}
func (*QueryInsuranceBidsByInsuranceProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{27}
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidsByInsuranceProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidsByInsuranceProviderRequest.Merge(m, src)
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidsByInsuranceProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidsByInsuranceProviderRequest proto.InternalMessageInfo

func (m *QueryInsuranceBidsByInsuranceProviderRequest) GetInsuranceProviderAddr() string {
	if m != nil {
		return m.InsuranceProviderAddr
	}
	return ""
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceBidsByValidatorRequest struct {
	ValidatorAddr string             `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceBidsByValidatorRequest) Reset()         { *m = QueryInsuranceBidsByValidatorRequest{} }
func (m *QueryInsuranceBidsByValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidsByValidatorRequest) ProtoMessage()    {}
func (*QueryInsuranceBidsByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{28}
}
func (m *QueryInsuranceBidsByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidsByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidsByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidsByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidsByValidatorRequest.Merge(m, src)
}
func (m *QueryInsuranceBidsByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidsByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidsByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidsByValidatorRequest proto.InternalMessageInfo

func (m *QueryInsuranceBidsByValidatorRequest) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *QueryInsuranceBidsByValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceBidsResponse struct {
	InsuranceBids []InsuranceBid      `protobuf:"bytes,1,rep,name=insurance_bids,json=insuranceBids,proto3" json:"insurance_bids"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceBidsResponse) Reset()         { *m = QueryInsuranceBidsResponse{} }
func (m *QueryInsuranceBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceBidsResponse) ProtoMessage()    {}
func (*QueryInsuranceBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{29}
}
func (m *QueryInsuranceBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceBidsResponse.Merge(m, src)
}
func (m *QueryInsuranceBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceBidsResponse proto.InternalMessageInfo

func (m *QueryInsuranceBidsResponse) GetInsuranceBids() []InsuranceBid {
	if m != nil {
		return m.InsuranceBids
	}
	return nil
}

func (m *QueryInsuranceBidsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceUnbondRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryInsuranceUnbondRequestRequest) Reset()         { *m = QueryInsuranceUnbondRequestRequest{} }
func (m *QueryInsuranceUnbondRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceUnbondRequestRequest) ProtoMessage()    {}
func (*QueryInsuranceUnbondRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{30}
}
func (m *QueryInsuranceUnbondRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestRequest.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestRequest proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryInsuranceUnbondRequestResponse struct {
	InsuranceUnbondRequest InsuranceUnbondRequest `protobuf:"bytes,1,opt,name=insurance_unbond_request,json=insuranceUnbondRequest,proto3" json:"insurance_unbond_request"`
}

func (m *QueryInsuranceUnbondRequestResponse) Reset()         { *m = QueryInsuranceUnbondRequestResponse{} }
func (m *QueryInsuranceUnbondRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceUnbondRequestResponse) ProtoMessage()    {}
func (*QueryInsuranceUnbondRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{31}
}
func (m *QueryInsuranceUnbondRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestResponse.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestResponse proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestResponse) GetInsuranceUnbondRequest() InsuranceUnbondRequest {
	if m != nil {
		return m.InsuranceUnbondRequest
	}
	return InsuranceUnbondRequest{}
}

type QueryInsuranceUnbondRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceUnbondRequestsRequest) Reset()         { *m = QueryInsuranceUnbondRequestsRequest{} }
func (m *QueryInsuranceUnbondRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceUnbondRequestsRequest) ProtoMessage()    {}
func (*QueryInsuranceUnbondRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{32}
}
func (m *QueryInsuranceUnbondRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestsRequest.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestsRequest proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceUnbondRequestsByInsuranceProviderRequest struct {
	InsuranceProviderAddr string             `protobuf:"bytes,1,opt,name=insurance_provider_addr,json=insuranceProviderAddr,proto3" json:"insurance_provider_addr,omitempty"`
	Pagination            *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) Reset() {
	*m = QueryInsuranceUnbondRequestsByInsuranceProviderRequest{}
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInsuranceUnbondRequestsByInsuranceProviderRequest) ProtoMessage() {}
func (*QueryInsuranceUnbondRequestsByInsuranceProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{33}
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestsByInsuranceProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestsByInsuranceProviderRequest.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestsByInsuranceProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestsByInsuranceProviderRequest proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) GetInsuranceProviderAddr() string {
	if m != nil {
		return m.InsuranceProviderAddr
	}
	return ""
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceUnbondRequestsByValidatorRequest struct {
	ValidatorAddr string             `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) Reset() {
	*m = QueryInsuranceUnbondRequestsByValidatorRequest{}
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInsuranceUnbondRequestsByValidatorRequest) ProtoMessage() {}
func (*QueryInsuranceUnbondRequestsByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{34}
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestsByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestsByValidatorRequest.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestsByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestsByValidatorRequest proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceUnbondRequestsResponse struct {
	InsuranceUnbondRequests []InsuranceUnbondRequest `protobuf:"bytes,1,rep,name=insurance_unbond_requests,json=insuranceUnbondRequests,proto3" json:"insurance_unbond_requests"`
	Pagination              *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsuranceUnbondRequestsResponse) Reset()         { *m = QueryInsuranceUnbondRequestsResponse{} }
func (m *QueryInsuranceUnbondRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceUnbondRequestsResponse) ProtoMessage()    {}
func (*QueryInsuranceUnbondRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{35}
}
func (m *QueryInsuranceUnbondRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceUnbondRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceUnbondRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceUnbondRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceUnbondRequestsResponse.Merge(m, src)
}
func (m *QueryInsuranceUnbondRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceUnbondRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceUnbondRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceUnbondRequestsResponse proto.InternalMessageInfo

func (m *QueryInsuranceUnbondRequestsResponse) GetInsuranceUnbondRequests() []InsuranceUnbondRequest {
	if m != nil {
		return m.InsuranceUnbondRequests
	}
	return nil
}

func (m *QueryInsuranceUnbondRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.liquidstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.liquidstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryLiquidValidatorsRequest)(nil), "canto.liquidstaking.v1.QueryLiquidValidatorsRequest")
	proto.RegisterType((*QueryLiquidValidatorsResponse)(nil), "canto.liquidstaking.v1.QueryLiquidValidatorsResponse")
	proto.RegisterType((*QueryLiquidStakingStateRequest)(nil), "canto.liquidstaking.v1.QueryLiquidStakingStateRequest")
	proto.RegisterType((*QueryLiquidStakingStateResponse)(nil), "canto.liquidstaking.v1.QueryLiquidStakingStateResponse")
	proto.RegisterType((*QueryAliveChunkRequest)(nil), "canto.liquidstaking.v1.QueryAliveChunkRequest")
	proto.RegisterType((*QueryAliveChunkResponse)(nil), "canto.liquidstaking.v1.QueryAliveChunkResponse")
	proto.RegisterType((*QueryAliveChunksRequest)(nil), "canto.liquidstaking.v1.QueryAliveChunksRequest")
	proto.RegisterType((*QueryAliveChunksByInsuranceProviderRequest)(nil), "canto.liquidstaking.v1.QueryAliveChunksByInsuranceProviderRequest")
	proto.RegisterType((*QueryAliveChunksByValidatorRequest)(nil), "canto.liquidstaking.v1.QueryAliveChunksByValidatorRequest")
	proto.RegisterType((*QueryAliveChunksResponse)(nil), "canto.liquidstaking.v1.QueryAliveChunksResponse")
	proto.RegisterType((*QueryUnbondingChunksRequest)(nil), "canto.liquidstaking.v1.QueryUnbondingChunksRequest")
	proto.RegisterType((*QueryUnbondingChunksResponse)(nil), "canto.liquidstaking.v1.QueryUnbondingChunksResponse")
	proto.RegisterType((*QueryChunkBondRequestRequest)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestRequest")
	proto.RegisterType((*QueryChunkBondRequestResponse)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestResponse")
	proto.RegisterType((*QueryChunkBondRequestsRequest)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestsRequest")
	proto.RegisterType((*QueryChunkBondRequestsByDelegatorRequest)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestsByDelegatorRequest")
	proto.RegisterType((*QueryChunkBondRequestsResponse)(nil), "canto.liquidstaking.v1.QueryChunkBondRequestsResponse")
	proto.RegisterType((*QueryChunkUnbondRequestRequest)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestRequest")
	proto.RegisterType((*QueryChunkUnbondRequestResponse)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestResponse")
	proto.RegisterType((*QueryChunkUnbondRequestsRequest)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestsRequest")
	proto.RegisterType((*QueryChunkUnbondRequestsByUndelegatorRequest)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestsByUndelegatorRequest")
	proto.RegisterType((*QueryChunkUnbondRequestsResponse)(nil), "canto.liquidstaking.v1.QueryChunkUnbondRequestsResponse")
	proto.RegisterType((*QueryInsuranceBidRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceBidRequest")
	proto.RegisterType((*QueryInsuranceBidResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceBidResponse")
	proto.RegisterType((*QueryInsuranceBidsRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceBidsRequest")
	proto.RegisterType((*QueryInsuranceBidsByInsuranceProviderRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceBidsByInsuranceProviderRequest")
	proto.RegisterType((*QueryInsuranceBidsByValidatorRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceBidsByValidatorRequest")
	proto.RegisterType((*QueryInsuranceBidsResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceBidsResponse")
	proto.RegisterType((*QueryInsuranceUnbondRequestRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestRequest")
	proto.RegisterType((*QueryInsuranceUnbondRequestResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestResponse")
	proto.RegisterType((*QueryInsuranceUnbondRequestsRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestsRequest")
	proto.RegisterType((*QueryInsuranceUnbondRequestsByInsuranceProviderRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestsByInsuranceProviderRequest")
	proto.RegisterType((*QueryInsuranceUnbondRequestsByValidatorRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestsByValidatorRequest")
	proto.RegisterType((*QueryInsuranceUnbondRequestsResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceUnbondRequestsResponse")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/query.proto", fileDescriptor_a04856e9492a9fb6)
}

var fileDescriptor_a04856e9492a9fb6 = []byte{
	// 1585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4f, 0x6c, 0x14, 0x55,
	0x18, 0xef, 0x2b, 0x48, 0xe2, 0x57, 0x0a, 0xe5, 0x2b, 0xb4, 0x65, 0x85, 0xa5, 0x0c, 0x58, 0x4b,
	0x69, 0x67, 0xda, 0x6d, 0xa9, 0x88, 0xc4, 0xc0, 0x42, 0x44, 0x8c, 0xf2, 0xa7, 0xfc, 0x39, 0x10,
	0xe2, 0x66, 0xba, 0x33, 0x59, 0x26, 0x6c, 0x67, 0x96, 0x9d, 0xd9, 0xd5, 0x86, 0x34, 0x1a, 0x6f,
	0xde, 0x4c, 0x08, 0x07, 0x2f, 0xa2, 0x31, 0x31, 0x1e, 0x0c, 0x07, 0x2f, 0x62, 0x3c, 0x18, 0x6f,
	0x78, 0x12, 0xe2, 0x85, 0x93, 0x51, 0xf0, 0xe2, 0xd5, 0x9b, 0x9e, 0xcc, 0xbe, 0x79, 0x33, 0x9d,
	0x3f, 0xef, 0xcd, 0xce, 0x2c, 0x93, 0xc0, 0xa9, 0xed, 0x7b, 0xdf, 0x37, 0xdf, 0xef, 0xf7, 0xbd,
	0xdf, 0xf7, 0xfe, 0x7c, 0x29, 0x48, 0x55, 0xd5, 0x74, 0x2c, 0xa5, 0x6e, 0xdc, 0x68, 0x19, 0x9a,
	0xed, 0xa8, 0xd7, 0x0d, 0xb3, 0xa6, 0xb4, 0xe7, 0x94, 0x1b, 0x2d, 0xbd, 0xb9, 0x2a, 0x37, 0x9a,
	0x96, 0x63, 0xe1, 0x08, 0xb5, 0x91, 0x43, 0x36, 0x72, 0x7b, 0xae, 0xb0, 0xbd, 0x66, 0xd5, 0x2c,
	0x6a, 0xa2, 0x74, 0x7e, 0x73, 0xad, 0x0b, 0xbb, 0x6a, 0x96, 0x55, 0xab, 0xeb, 0x8a, 0xda, 0x30,
	0x14, 0xd5, 0x34, 0x2d, 0x47, 0x75, 0x0c, 0xcb, 0xb4, 0xd9, 0xec, 0x54, 0xd5, 0xb2, 0x57, 0x2c,
	0x5b, 0x59, 0x56, 0x6d, 0xdd, 0x0d, 0xa2, 0xb4, 0xe7, 0x96, 0x75, 0x47, 0x9d, 0x53, 0x1a, 0x6a,
	0xcd, 0x30, 0xa9, 0xb1, 0x6f, 0xcb, 0xc7, 0x16, 0x06, 0xe2, 0xda, 0xee, 0x13, 0xd8, 0x36, 0xd4,
	0xa6, 0xba, 0xc2, 0x82, 0x4b, 0xdb, 0x01, 0xcf, 0x77, 0x42, 0x9e, 0xa3, 0x83, 0x4b, 0xfa, 0x8d,
	0x96, 0x6e, 0x3b, 0xd2, 0x05, 0x18, 0x0e, 0x8d, 0xda, 0x0d, 0xcb, 0xb4, 0x75, 0x3c, 0x0a, 0x9b,
	0x5c, 0xe7, 0x31, 0x32, 0x4e, 0x26, 0x07, 0x4a, 0x45, 0x99, 0x9f, 0x06, 0xd9, 0xf5, 0x2b, 0x6f,
	0xbc, 0xff, 0xfb, 0x9e, 0xbe, 0x25, 0xe6, 0x23, 0x15, 0x61, 0x17, 0xfd, 0xe8, 0x3b, 0xd4, 0xfa,
	0xb2, 0x5a, 0x37, 0x34, 0xd5, 0xb1, 0x9a, 0x7e, 0xd0, 0x8f, 0x08, 0xec, 0x16, 0x18, 0xb0, 0xf8,
	0x15, 0xd8, 0xe6, 0x86, 0xaa, 0xb4, 0xfd, 0xc9, 0x31, 0x32, 0xbe, 0x61, 0x72, 0xa0, 0x34, 0x2d,
	0x82, 0x12, 0xf9, 0xd8, 0x05, 0x47, 0x75, 0x74, 0x06, 0x6c, 0xa8, 0x1e, 0x09, 0x24, 0x8d, 0x43,
	0x31, 0x80, 0xe0, 0x82, 0xfb, 0x15, 0xea, 0xe2, 0x81, 0xdc, 0x0b, 0x7b, 0x84, 0x16, 0x2e, 0x4a,
	0x69, 0x12, 0x46, 0xa8, 0xc9, 0xf1, 0xba, 0xd1, 0xd6, 0x4f, 0x5c, 0x6b, 0x99, 0xd7, 0x99, 0x33,
	0x6e, 0x81, 0x7e, 0x43, 0xa3, 0xb9, 0xdb, 0xb8, 0xd4, 0x6f, 0x68, 0x92, 0x06, 0xa3, 0x31, 0x4b,
	0x46, 0xf5, 0x34, 0x0c, 0xa8, 0x9d, 0xd1, 0x4a, 0xb5, 0x33, 0xcc, 0xf2, 0x2d, 0x89, 0x48, 0xae,
	0x7f, 0x80, 0x51, 0x03, 0xd5, 0x1f, 0x91, 0xd4, 0x58, 0x14, 0x2f, 0xe5, 0xf8, 0x26, 0xc0, 0xba,
	0xc4, 0x58, 0x90, 0x09, 0xd9, 0xd5, 0xa3, 0xdc, 0xd1, 0xa3, 0xec, 0x8a, 0x9e, 0xe9, 0x51, 0x3e,
	0xa7, 0xd6, 0xbc, 0x4c, 0x2c, 0x05, 0x3c, 0xa5, 0x6f, 0x09, 0x4c, 0x45, 0x63, 0x94, 0x57, 0x4f,
	0x9b, 0x76, 0xab, 0xa9, 0x9a, 0x55, 0xfd, 0x5c, 0xd3, 0x6a, 0x1b, 0x9a, 0xde, 0xf4, 0xc2, 0x2e,
	0xc2, 0xa8, 0xe1, 0xcd, 0x55, 0x1a, 0x6c, 0xb2, 0xa2, 0x6a, 0x5a, 0x93, 0x62, 0x78, 0x71, 0x69,
	0x87, 0x11, 0x75, 0x3d, 0xae, 0x69, 0xcd, 0x08, 0xdc, 0xfe, 0x9e, 0xe1, 0xde, 0x22, 0x20, 0xc5,
	0xe1, 0xfa, 0x3a, 0xf0, 0x60, 0xbe, 0x0c, 0x5b, 0x7c, 0x9d, 0x05, 0xd1, 0x0d, 0xfa, 0xa3, 0xb9,
	0xa2, 0xba, 0x4b, 0x60, 0x2c, 0xbe, 0x50, 0x22, 0x3d, 0x6c, 0xe8, 0x55, 0x0f, 0x78, 0x8a, 0x83,
	0xf7, 0x95, 0xae, 0x78, 0x5d, 0x1c, 0x21, 0xc0, 0xbb, 0xe1, 0x25, 0x8a, 0xf7, 0x92, 0xb9, 0x6c,
	0x99, 0x9a, 0x61, 0xd6, 0x42, 0xe2, 0xf2, 0xeb, 0x3d, 0x36, 0xcd, 0xea, 0x44, 0x66, 0xf3, 0x2e,
	0x4e, 0xcb, 0xd4, 0xbc, 0xa4, 0x08, 0xaa, 0xe5, 0x43, 0xb6, 0x3d, 0xc4, 0xed, 0x59, 0x8e, 0xde,
	0x83, 0x61, 0x9a, 0x9d, 0x4a, 0x27, 0x5e, 0xa5, 0xe9, 0xce, 0x7a, 0x7b, 0xd5, 0xa4, 0x28, 0x57,
	0xd1, 0xcf, 0xb1, 0x8c, 0x6d, 0xab, 0x46, 0xc6, 0x6d, 0xa9, 0x26, 0x00, 0x90, 0x7b, 0x39, 0x7d,
	0x46, 0x60, 0x92, 0x1f, 0xa9, 0xbc, 0x7a, 0x52, 0xaf, 0xeb, 0xb5, 0x88, 0x4a, 0x35, 0x6f, 0x2c,
	0xa4, 0x52, 0x7f, 0x34, 0x57, 0x95, 0xfe, 0x42, 0xd8, 0x1e, 0xc9, 0xc9, 0x42, 0xb7, 0x75, 0xd8,
	0x90, 0xcb, 0x3a, 0xe4, 0x27, 0xe0, 0xd9, 0x20, 0x15, 0x57, 0xa6, 0x5d, 0x34, 0x78, 0x9f, 0xb0,
	0xfd, 0x9f, 0xe7, 0xc2, 0xe8, 0x5f, 0x85, 0xed, 0x2e, 0xfd, 0x96, 0x19, 0x4c, 0x00, 0xd3, 0xc3,
	0x54, 0x22, 0xff, 0xf0, 0x17, 0xb1, 0x1a, 0x1b, 0xcb, 0x8f, 0xbc, 0x21, 0x64, 0x92, 0xbb, 0x9e,
	0xbf, 0x24, 0x30, 0x2d, 0x8a, 0x55, 0x5e, 0xbd, 0x64, 0x6a, 0x51, 0x4d, 0x1f, 0x80, 0xa1, 0x96,
	0xc9, 0x55, 0xf5, 0xd6, 0xc0, 0x78, 0xae, 0xba, 0x7e, 0x48, 0x60, 0x5c, 0x9c, 0x0f, 0xb6, 0xb4,
	0x1a, 0xec, 0xe0, 0x2d, 0xad, 0xa7, 0xed, 0x0c, 0x6b, 0xcb, 0xd4, 0x3d, 0x1c, 0x5f, 0xe1, 0x1c,
	0xf5, 0x3d, 0xc5, 0x0e, 0x14, 0xff, 0x20, 0x2e, 0x1b, 0x9a, 0x48, 0xd9, 0x75, 0xd8, 0xc9, 0xb1,
	0x65, 0xbc, 0xcf, 0xc2, 0xe0, 0xfa, 0x81, 0xbd, 0xcc, 0xfc, 0x06, 0x4a, 0xfb, 0x45, 0x7c, 0x83,
	0x1f, 0x61, 0x4c, 0x37, 0x1b, 0x81, 0x31, 0xa9, 0xca, 0x89, 0x96, 0xbb, 0xec, 0xee, 0x7a, 0xb2,
	0x0b, 0x45, 0x79, 0x8e, 0xef, 0x25, 0xb7, 0x09, 0xec, 0xe7, 0x01, 0x7e, 0xd6, 0x37, 0x93, 0x7b,
	0x04, 0x0a, 0xbc, 0xe5, 0x62, 0xea, 0x38, 0x0f, 0x5b, 0x42, 0xea, 0xf0, 0xca, 0x21, 0x8b, 0x3c,
	0x06, 0x83, 0xf2, 0xc8, 0xb1, 0x04, 0x16, 0xd8, 0x4d, 0xcf, 0x0f, 0x99, 0x6a, 0x9b, 0xbf, 0x4d,
	0x60, 0x5f, 0xa2, 0x1b, 0x63, 0x6e, 0xc2, 0xd8, 0x3a, 0x73, 0xee, 0x76, 0x2f, 0x77, 0xcd, 0x01,
	0x6f, 0x5b, 0x18, 0x31, 0xb8, 0xb3, 0xd2, 0x4a, 0x22, 0xac, 0xdc, 0x0b, 0xe8, 0x1e, 0x81, 0xc5,
	0xa4, 0x78, 0xcf, 0x71, 0x29, 0xdd, 0x21, 0x20, 0x27, 0x43, 0x7f, 0xd6, 0x45, 0xf5, 0x67, 0xac,
	0xd8, 0x05, 0x87, 0x4e, 0x03, 0x76, 0x8a, 0x44, 0xe6, 0x55, 0x5a, 0x6f, 0x2a, 0x1b, 0xe5, 0xab,
	0x2c, 0xbf, 0xea, 0x2b, 0xdd, 0xd9, 0x0b, 0x2f, 0x50, 0x8e, 0xf8, 0x09, 0x81, 0x4d, 0x6e, 0x57,
	0x00, 0x85, 0xa7, 0x64, 0xbc, 0x11, 0x51, 0x38, 0x98, 0xca, 0x96, 0x3d, 0x28, 0x26, 0x3e, 0xfe,
	0xed, 0xaf, 0x5b, 0xfd, 0xe3, 0x58, 0x54, 0x12, 0x3b, 0x1f, 0xf8, 0x1d, 0x81, 0xa1, 0x68, 0x8f,
	0x01, 0x17, 0x12, 0x23, 0x09, 0x7a, 0x16, 0x85, 0x43, 0x19, 0xbd, 0x18, 0xd2, 0x39, 0x8a, 0xf4,
	0x20, 0x1e, 0x50, 0x12, 0xfb, 0x39, 0x81, 0x36, 0x07, 0xfe, 0x48, 0x00, 0xe3, 0x4d, 0x07, 0x5c,
	0x4c, 0x01, 0x80, 0xd3, 0xc7, 0x28, 0xbc, 0x9a, 0xd9, 0x8f, 0x41, 0x5f, 0xa0, 0xd0, 0x65, 0x9c,
	0xee, 0x02, 0x9d, 0x8d, 0x74, 0x7e, 0x3a, 0x3a, 0x7e, 0x41, 0x00, 0xd6, 0x1f, 0xa5, 0x28, 0x27,
	0x46, 0x8f, 0x35, 0x4e, 0x0a, 0x4a, 0x6a, 0xfb, 0xb4, 0x09, 0x0e, 0x3c, 0xa6, 0x6d, 0xe5, 0xa6,
	0xa1, 0xad, 0xe1, 0xe7, 0x04, 0x06, 0x02, 0x2f, 0x6f, 0x4c, 0x1b, 0xd3, 0xd7, 0xc2, 0x6c, 0x7a,
	0x07, 0x86, 0x72, 0x9a, 0xa2, 0x9c, 0xc0, 0xfd, 0x69, 0x50, 0xe2, 0x3f, 0x04, 0x8a, 0xc9, 0xfd,
	0x15, 0x2c, 0xa7, 0x85, 0x20, 0xde, 0xb9, 0x7b, 0xa0, 0x71, 0x85, 0xd2, 0xb8, 0x88, 0x4b, 0x22,
	0x1a, 0xf1, 0x93, 0xa0, 0x93, 0x73, 0xfe, 0xf1, 0xb0, 0x16, 0x26, 0xfd, 0x80, 0xc0, 0x08, 0xbf,
	0x4b, 0x83, 0x47, 0xd2, 0x93, 0x8d, 0xee, 0xf5, 0x3d, 0x90, 0x7c, 0x8b, 0x92, 0x2c, 0xe3, 0x31,
	0x11, 0xc9, 0xf5, 0x5a, 0x55, 0x6e, 0x86, 0xcf, 0x91, 0x08, 0xa5, 0xbb, 0x04, 0xb6, 0x46, 0x7a,
	0x22, 0x38, 0x9f, 0x88, 0x87, 0xdf, 0x60, 0x29, 0x2c, 0x64, 0x73, 0x62, 0x44, 0x66, 0x29, 0x91,
	0x29, 0x9c, 0x14, 0x11, 0x69, 0x79, 0x8e, 0x1e, 0xe0, 0x1f, 0x08, 0x0c, 0x45, 0x5f, 0xe7, 0x5d,
	0xf6, 0x4b, 0x41, 0x4f, 0xa7, 0xcb, 0x7e, 0x29, 0xea, 0xec, 0x48, 0x87, 0x29, 0xe6, 0x12, 0xce,
	0x8a, 0x30, 0x73, 0xfa, 0x0d, 0x6e, 0x55, 0x7f, 0x4f, 0x60, 0x5b, 0xac, 0x53, 0x81, 0xd9, 0x60,
	0xf8, 0x09, 0x5f, 0xcc, 0xea, 0xc6, 0xe0, 0xcf, 0x53, 0xf8, 0x33, 0x78, 0x30, 0x03, 0x7c, 0xfc,
	0x9b, 0xc0, 0xae, 0xa4, 0xfe, 0x0f, 0x1e, 0xcb, 0x86, 0x26, 0xde, 0x3a, 0xea, 0x99, 0xcf, 0x59,
	0xca, 0xe7, 0x34, 0x9e, 0x12, 0xf1, 0xf1, 0x9f, 0xe8, 0xb6, 0x72, 0x33, 0xfc, 0x8c, 0x5f, 0xe3,
	0x72, 0xfd, 0x99, 0x00, 0xc6, 0xdf, 0xc8, 0x98, 0x02, 0x1f, 0xef, 0x3a, 0xdf, 0xe5, 0x70, 0x13,
	0xb7, 0x6e, 0xa4, 0x23, 0x94, 0xd8, 0x02, 0x96, 0x92, 0x17, 0x2a, 0x72, 0x09, 0x73, 0x95, 0xf6,
	0x13, 0x81, 0x61, 0x4e, 0xef, 0x00, 0xb3, 0x82, 0xf1, 0xd5, 0x76, 0x38, 0xbb, 0x23, 0xa3, 0x71,
	0x88, 0xd2, 0x50, 0x70, 0x26, 0x13, 0x0d, 0xfc, 0x97, 0xc0, 0x78, 0xb7, 0x0e, 0x0d, 0x9e, 0xcc,
	0x8a, 0x8a, 0xd7, 0xe0, 0x79, 0x0a, 0x6e, 0x97, 0x28, 0xb7, 0xb3, 0xf8, 0xae, 0x78, 0xfb, 0x0a,
	0xaa, 0x2f, 0xda, 0x46, 0x5a, 0x13, 0x70, 0xff, 0x86, 0xc0, 0xe6, 0xe0, 0xb3, 0x14, 0x93, 0x4f,
	0x08, 0x4e, 0x47, 0xa5, 0x30, 0x97, 0xc1, 0x23, 0xed, 0xc6, 0x10, 0x7e, 0x57, 0xbb, 0x42, 0xfb,
	0x9a, 0xc0, 0x60, 0xe8, 0x21, 0x8e, 0xe9, 0x23, 0xfb, 0xe2, 0x2a, 0x65, 0x71, 0xf1, 0x1a, 0xf6,
	0x14, 0xed, 0x24, 0x4e, 0xa4, 0x43, 0x8b, 0xff, 0x11, 0x18, 0xef, 0xd6, 0x7a, 0xe9, 0xa2, 0xa7,
	0x94, 0x9d, 0x9b, 0x9e, 0xe8, 0x5c, 0xa5, 0x74, 0x2e, 0xe3, 0xc5, 0x7c, 0xae, 0x2d, 0x11, 0xf2,
	0x8f, 0x08, 0x8c, 0x89, 0xda, 0x38, 0x78, 0x34, 0x0b, 0xe9, 0xd8, 0xe5, 0xa5, 0x17, 0xb2, 0x6f,
	0x53, 0xb2, 0x27, 0xb1, 0xdc, 0xcb, 0xf5, 0x25, 0x42, 0xed, 0x21, 0x81, 0x11, 0xfe, 0xc3, 0xb2,
	0xcb, 0x9d, 0x2c, 0xb1, 0x09, 0x53, 0x78, 0xbd, 0x27, 0x5f, 0xc6, 0xef, 0x0d, 0xca, 0xef, 0x30,
	0x2e, 0x76, 0x5f, 0x4c, 0xee, 0xee, 0xfd, 0x2b, 0x81, 0x51, 0xc1, 0x43, 0x1c, 0x7b, 0x01, 0xe6,
	0x17, 0xda, 0xd1, 0xde, 0x9c, 0x19, 0xad, 0xd7, 0x28, 0xad, 0x79, 0x9c, 0xcb, 0x4c, 0x0b, 0xbf,
	0xea, 0x87, 0xa9, 0xf4, 0x7d, 0x1b, 0x3c, 0xd3, 0x0b, 0xce, 0x84, 0x8a, 0x7c, 0x3a, 0xde, 0x35,
	0xca, 0x5b, 0xc5, 0x4a, 0xde, 0xb5, 0x19, 0xc9, 0x52, 0xf9, 0xea, 0xfd, 0xc7, 0x45, 0xf2, 0xe0,
	0x71, 0x91, 0xfc, 0xf1, 0xb8, 0x48, 0x3e, 0x7d, 0x52, 0xec, 0x7b, 0xf0, 0xa4, 0xd8, 0xf7, 0xe8,
	0x49, 0xb1, 0xef, 0x4a, 0xb9, 0x66, 0x38, 0xd7, 0x5a, 0xcb, 0x72, 0xd5, 0x5a, 0x51, 0x4e, 0x74,
	0x40, 0xcc, 0x9c, 0xd1, 0x9d, 0xf7, 0xad, 0xe6, 0x75, 0xf6, 0xd7, 0x45, 0xdd, 0x76, 0x4c, 0xdd,
	0x99, 0x69, 0x97, 0x3a, 0x78, 0x3e, 0x88, 0x40, 0x74, 0x56, 0x1b, 0xba, 0xbd, 0xbc, 0x89, 0xfe,
	0x93, 0xc5, 0xfc, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x28, 0x5f, 0x5f, 0x53, 0x22, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TBD
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TBD
	LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error)
	// TRD
	LiquidStakingState(ctx context.Context, in *QueryLiquidStakingStateRequest, opts ...grpc.CallOption) (*QueryLiquidStakingStateResponse, error)
	// TBD
	AliveChunk(ctx context.Context, in *QueryAliveChunkRequest, opts ...grpc.CallOption) (*QueryAliveChunkResponse, error)
	// TBD
	AliveChunks(ctx context.Context, in *QueryAliveChunksRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error)
	// TBD
	AliveChunksByInsuranceProvider(ctx context.Context, in *QueryAliveChunksByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error)
	// TBD
	AliveChunksByValidator(ctx context.Context, in *QueryAliveChunksByValidatorRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error)
	// TBD
	UnbondingChunks(ctx context.Context, in *QueryUnbondingChunksRequest, opts ...grpc.CallOption) (*QueryUnbondingChunksResponse, error)
	// TBD
	ChunkBondRequest(ctx context.Context, in *QueryChunkBondRequestRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestResponse, error)
	// TBD
	ChunkBondRequests(ctx context.Context, in *QueryChunkBondRequestsRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkBondRequestsByDelegator(ctx context.Context, in *QueryChunkBondRequestsByDelegatorRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkUnbondRequest(ctx context.Context, in *QueryChunkUnbondRequestRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestResponse, error)
	// TBD
	ChunkUnbondRequests(ctx context.Context, in *QueryChunkUnbondRequestsRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	ChunkUnbondRequestsByUndelegator(ctx context.Context, in *QueryChunkUnbondRequestsByUndelegatorRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	InsuranceBid(ctx context.Context, in *QueryInsuranceBidRequest, opts ...grpc.CallOption) (*QueryInsuranceBidResponse, error)
	// TBD
	InsuranceBids(ctx context.Context, in *QueryInsuranceBidsRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceBidsByInsuranceProvider(ctx context.Context, in *QueryInsuranceBidsByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceBidsByValidator(ctx context.Context, in *QueryInsuranceBidsByValidatorRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceUnbondRequest(ctx context.Context, in *QueryInsuranceUnbondRequestRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestResponse, error)
	// TBD
	InsuranceUnbondRequests(ctx context.Context, in *QueryInsuranceUnbondRequestsRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestsResponse, error)
	// TBD
	InsuranceUnbondRequestsByInsuranceProvider(ctx context.Context, in *QueryInsuranceUnbondRequestsByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error) {
	out := new(QueryLiquidValidatorsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/LiquidValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidStakingState(ctx context.Context, in *QueryLiquidStakingStateRequest, opts ...grpc.CallOption) (*QueryLiquidStakingStateResponse, error) {
	out := new(QueryLiquidStakingStateResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/LiquidStakingState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliveChunk(ctx context.Context, in *QueryAliveChunkRequest, opts ...grpc.CallOption) (*QueryAliveChunkResponse, error) {
	out := new(QueryAliveChunkResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/AliveChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliveChunks(ctx context.Context, in *QueryAliveChunksRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error) {
	out := new(QueryAliveChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/AliveChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliveChunksByInsuranceProvider(ctx context.Context, in *QueryAliveChunksByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error) {
	out := new(QueryAliveChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/AliveChunksByInsuranceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliveChunksByValidator(ctx context.Context, in *QueryAliveChunksByValidatorRequest, opts ...grpc.CallOption) (*QueryAliveChunksResponse, error) {
	out := new(QueryAliveChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/AliveChunksByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingChunks(ctx context.Context, in *QueryUnbondingChunksRequest, opts ...grpc.CallOption) (*QueryUnbondingChunksResponse, error) {
	out := new(QueryUnbondingChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/UnbondingChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkBondRequest(ctx context.Context, in *QueryChunkBondRequestRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestResponse, error) {
	out := new(QueryChunkBondRequestResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkBondRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkBondRequests(ctx context.Context, in *QueryChunkBondRequestsRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error) {
	out := new(QueryChunkBondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkBondRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkBondRequestsByDelegator(ctx context.Context, in *QueryChunkBondRequestsByDelegatorRequest, opts ...grpc.CallOption) (*QueryChunkBondRequestsResponse, error) {
	out := new(QueryChunkBondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkBondRequestsByDelegator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkUnbondRequest(ctx context.Context, in *QueryChunkUnbondRequestRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestResponse, error) {
	out := new(QueryChunkUnbondRequestResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkUnbondRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkUnbondRequests(ctx context.Context, in *QueryChunkUnbondRequestsRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error) {
	out := new(QueryChunkUnbondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkUnbondRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkUnbondRequestsByUndelegator(ctx context.Context, in *QueryChunkUnbondRequestsByUndelegatorRequest, opts ...grpc.CallOption) (*QueryChunkUnbondRequestsResponse, error) {
	out := new(QueryChunkUnbondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkUnbondRequestsByUndelegator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceBid(ctx context.Context, in *QueryInsuranceBidRequest, opts ...grpc.CallOption) (*QueryInsuranceBidResponse, error) {
	out := new(QueryInsuranceBidResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceBids(ctx context.Context, in *QueryInsuranceBidsRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error) {
	out := new(QueryInsuranceBidsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceBidsByInsuranceProvider(ctx context.Context, in *QueryInsuranceBidsByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error) {
	out := new(QueryInsuranceBidsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceBidsByInsuranceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceBidsByValidator(ctx context.Context, in *QueryInsuranceBidsByValidatorRequest, opts ...grpc.CallOption) (*QueryInsuranceBidsResponse, error) {
	out := new(QueryInsuranceBidsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceBidsByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceUnbondRequest(ctx context.Context, in *QueryInsuranceUnbondRequestRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestResponse, error) {
	out := new(QueryInsuranceUnbondRequestResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceUnbondRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceUnbondRequests(ctx context.Context, in *QueryInsuranceUnbondRequestsRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestsResponse, error) {
	out := new(QueryInsuranceUnbondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceUnbondRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceUnbondRequestsByInsuranceProvider(ctx context.Context, in *QueryInsuranceUnbondRequestsByInsuranceProviderRequest, opts ...grpc.CallOption) (*QueryInsuranceUnbondRequestsResponse, error) {
	out := new(QueryInsuranceUnbondRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/InsuranceUnbondRequestsByInsuranceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TBD
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TBD
	LiquidValidators(context.Context, *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error)
	// TRD
	LiquidStakingState(context.Context, *QueryLiquidStakingStateRequest) (*QueryLiquidStakingStateResponse, error)
	// TBD
	AliveChunk(context.Context, *QueryAliveChunkRequest) (*QueryAliveChunkResponse, error)
	// TBD
	AliveChunks(context.Context, *QueryAliveChunksRequest) (*QueryAliveChunksResponse, error)
	// TBD
	AliveChunksByInsuranceProvider(context.Context, *QueryAliveChunksByInsuranceProviderRequest) (*QueryAliveChunksResponse, error)
	// TBD
	AliveChunksByValidator(context.Context, *QueryAliveChunksByValidatorRequest) (*QueryAliveChunksResponse, error)
	// TBD
	UnbondingChunks(context.Context, *QueryUnbondingChunksRequest) (*QueryUnbondingChunksResponse, error)
	// TBD
	ChunkBondRequest(context.Context, *QueryChunkBondRequestRequest) (*QueryChunkBondRequestResponse, error)
	// TBD
	ChunkBondRequests(context.Context, *QueryChunkBondRequestsRequest) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkBondRequestsByDelegator(context.Context, *QueryChunkBondRequestsByDelegatorRequest) (*QueryChunkBondRequestsResponse, error)
	// TBD
	ChunkUnbondRequest(context.Context, *QueryChunkUnbondRequestRequest) (*QueryChunkUnbondRequestResponse, error)
	// TBD
	ChunkUnbondRequests(context.Context, *QueryChunkUnbondRequestsRequest) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	ChunkUnbondRequestsByUndelegator(context.Context, *QueryChunkUnbondRequestsByUndelegatorRequest) (*QueryChunkUnbondRequestsResponse, error)
	// TBD
	InsuranceBid(context.Context, *QueryInsuranceBidRequest) (*QueryInsuranceBidResponse, error)
	// TBD
	InsuranceBids(context.Context, *QueryInsuranceBidsRequest) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceBidsByInsuranceProvider(context.Context, *QueryInsuranceBidsByInsuranceProviderRequest) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceBidsByValidator(context.Context, *QueryInsuranceBidsByValidatorRequest) (*QueryInsuranceBidsResponse, error)
	// TBD
	InsuranceUnbondRequest(context.Context, *QueryInsuranceUnbondRequestRequest) (*QueryInsuranceUnbondRequestResponse, error)
	// TBD
	InsuranceUnbondRequests(context.Context, *QueryInsuranceUnbondRequestsRequest) (*QueryInsuranceUnbondRequestsResponse, error)
	// TBD
	InsuranceUnbondRequestsByInsuranceProvider(context.Context, *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) (*QueryInsuranceUnbondRequestsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LiquidValidators(ctx context.Context, req *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidValidators not implemented")
}
func (*UnimplementedQueryServer) LiquidStakingState(ctx context.Context, req *QueryLiquidStakingStateRequest) (*QueryLiquidStakingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidStakingState not implemented")
}
func (*UnimplementedQueryServer) AliveChunk(ctx context.Context, req *QueryAliveChunkRequest) (*QueryAliveChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveChunk not implemented")
}
func (*UnimplementedQueryServer) AliveChunks(ctx context.Context, req *QueryAliveChunksRequest) (*QueryAliveChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveChunks not implemented")
}
func (*UnimplementedQueryServer) AliveChunksByInsuranceProvider(ctx context.Context, req *QueryAliveChunksByInsuranceProviderRequest) (*QueryAliveChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveChunksByInsuranceProvider not implemented")
}
func (*UnimplementedQueryServer) AliveChunksByValidator(ctx context.Context, req *QueryAliveChunksByValidatorRequest) (*QueryAliveChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliveChunksByValidator not implemented")
}
func (*UnimplementedQueryServer) UnbondingChunks(ctx context.Context, req *QueryUnbondingChunksRequest) (*QueryUnbondingChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingChunks not implemented")
}
func (*UnimplementedQueryServer) ChunkBondRequest(ctx context.Context, req *QueryChunkBondRequestRequest) (*QueryChunkBondRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkBondRequest not implemented")
}
func (*UnimplementedQueryServer) ChunkBondRequests(ctx context.Context, req *QueryChunkBondRequestsRequest) (*QueryChunkBondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkBondRequests not implemented")
}
func (*UnimplementedQueryServer) ChunkBondRequestsByDelegator(ctx context.Context, req *QueryChunkBondRequestsByDelegatorRequest) (*QueryChunkBondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkBondRequestsByDelegator not implemented")
}
func (*UnimplementedQueryServer) ChunkUnbondRequest(ctx context.Context, req *QueryChunkUnbondRequestRequest) (*QueryChunkUnbondRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkUnbondRequest not implemented")
}
func (*UnimplementedQueryServer) ChunkUnbondRequests(ctx context.Context, req *QueryChunkUnbondRequestsRequest) (*QueryChunkUnbondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkUnbondRequests not implemented")
}
func (*UnimplementedQueryServer) ChunkUnbondRequestsByUndelegator(ctx context.Context, req *QueryChunkUnbondRequestsByUndelegatorRequest) (*QueryChunkUnbondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkUnbondRequestsByUndelegator not implemented")
}
func (*UnimplementedQueryServer) InsuranceBid(ctx context.Context, req *QueryInsuranceBidRequest) (*QueryInsuranceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceBid not implemented")
}
func (*UnimplementedQueryServer) InsuranceBids(ctx context.Context, req *QueryInsuranceBidsRequest) (*QueryInsuranceBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceBids not implemented")
}
func (*UnimplementedQueryServer) InsuranceBidsByInsuranceProvider(ctx context.Context, req *QueryInsuranceBidsByInsuranceProviderRequest) (*QueryInsuranceBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceBidsByInsuranceProvider not implemented")
}
func (*UnimplementedQueryServer) InsuranceBidsByValidator(ctx context.Context, req *QueryInsuranceBidsByValidatorRequest) (*QueryInsuranceBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceBidsByValidator not implemented")
}
func (*UnimplementedQueryServer) InsuranceUnbondRequest(ctx context.Context, req *QueryInsuranceUnbondRequestRequest) (*QueryInsuranceUnbondRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceUnbondRequest not implemented")
}
func (*UnimplementedQueryServer) InsuranceUnbondRequests(ctx context.Context, req *QueryInsuranceUnbondRequestsRequest) (*QueryInsuranceUnbondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceUnbondRequests not implemented")
}
func (*UnimplementedQueryServer) InsuranceUnbondRequestsByInsuranceProvider(ctx context.Context, req *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) (*QueryInsuranceUnbondRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceUnbondRequestsByInsuranceProvider not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/LiquidValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidValidators(ctx, req.(*QueryLiquidValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidStakingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidStakingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidStakingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/LiquidStakingState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidStakingState(ctx, req.(*QueryLiquidStakingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliveChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliveChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliveChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/AliveChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliveChunk(ctx, req.(*QueryAliveChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliveChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliveChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliveChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/AliveChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliveChunks(ctx, req.(*QueryAliveChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliveChunksByInsuranceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliveChunksByInsuranceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliveChunksByInsuranceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/AliveChunksByInsuranceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliveChunksByInsuranceProvider(ctx, req.(*QueryAliveChunksByInsuranceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliveChunksByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliveChunksByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliveChunksByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/AliveChunksByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliveChunksByValidator(ctx, req.(*QueryAliveChunksByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondingChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/UnbondingChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingChunks(ctx, req.(*QueryUnbondingChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkBondRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkBondRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkBondRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkBondRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkBondRequest(ctx, req.(*QueryChunkBondRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkBondRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkBondRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkBondRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkBondRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkBondRequests(ctx, req.(*QueryChunkBondRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkBondRequestsByDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkBondRequestsByDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkBondRequestsByDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkBondRequestsByDelegator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkBondRequestsByDelegator(ctx, req.(*QueryChunkBondRequestsByDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkUnbondRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkUnbondRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkUnbondRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkUnbondRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkUnbondRequest(ctx, req.(*QueryChunkUnbondRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkUnbondRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkUnbondRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkUnbondRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkUnbondRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkUnbondRequests(ctx, req.(*QueryChunkUnbondRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkUnbondRequestsByUndelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkUnbondRequestsByUndelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkUnbondRequestsByUndelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkUnbondRequestsByUndelegator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkUnbondRequestsByUndelegator(ctx, req.(*QueryChunkUnbondRequestsByUndelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceBid(ctx, req.(*QueryInsuranceBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceBids(ctx, req.(*QueryInsuranceBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceBidsByInsuranceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceBidsByInsuranceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceBidsByInsuranceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceBidsByInsuranceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceBidsByInsuranceProvider(ctx, req.(*QueryInsuranceBidsByInsuranceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceBidsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceBidsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceBidsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceBidsByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceBidsByValidator(ctx, req.(*QueryInsuranceBidsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceUnbondRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceUnbondRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceUnbondRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceUnbondRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceUnbondRequest(ctx, req.(*QueryInsuranceUnbondRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceUnbondRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceUnbondRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceUnbondRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceUnbondRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceUnbondRequests(ctx, req.(*QueryInsuranceUnbondRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceUnbondRequestsByInsuranceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceUnbondRequestsByInsuranceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceUnbondRequestsByInsuranceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/InsuranceUnbondRequestsByInsuranceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceUnbondRequestsByInsuranceProvider(ctx, req.(*QueryInsuranceUnbondRequestsByInsuranceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.liquidstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LiquidValidators",
			Handler:    _Query_LiquidValidators_Handler,
		},
		{
			MethodName: "LiquidStakingState",
			Handler:    _Query_LiquidStakingState_Handler,
		},
		{
			MethodName: "AliveChunk",
			Handler:    _Query_AliveChunk_Handler,
		},
		{
			MethodName: "AliveChunks",
			Handler:    _Query_AliveChunks_Handler,
		},
		{
			MethodName: "AliveChunksByInsuranceProvider",
			Handler:    _Query_AliveChunksByInsuranceProvider_Handler,
		},
		{
			MethodName: "AliveChunksByValidator",
			Handler:    _Query_AliveChunksByValidator_Handler,
		},
		{
			MethodName: "UnbondingChunks",
			Handler:    _Query_UnbondingChunks_Handler,
		},
		{
			MethodName: "ChunkBondRequest",
			Handler:    _Query_ChunkBondRequest_Handler,
		},
		{
			MethodName: "ChunkBondRequests",
			Handler:    _Query_ChunkBondRequests_Handler,
		},
		{
			MethodName: "ChunkBondRequestsByDelegator",
			Handler:    _Query_ChunkBondRequestsByDelegator_Handler,
		},
		{
			MethodName: "ChunkUnbondRequest",
			Handler:    _Query_ChunkUnbondRequest_Handler,
		},
		{
			MethodName: "ChunkUnbondRequests",
			Handler:    _Query_ChunkUnbondRequests_Handler,
		},
		{
			MethodName: "ChunkUnbondRequestsByUndelegator",
			Handler:    _Query_ChunkUnbondRequestsByUndelegator_Handler,
		},
		{
			MethodName: "InsuranceBid",
			Handler:    _Query_InsuranceBid_Handler,
		},
		{
			MethodName: "InsuranceBids",
			Handler:    _Query_InsuranceBids_Handler,
		},
		{
			MethodName: "InsuranceBidsByInsuranceProvider",
			Handler:    _Query_InsuranceBidsByInsuranceProvider_Handler,
		},
		{
			MethodName: "InsuranceBidsByValidator",
			Handler:    _Query_InsuranceBidsByValidator_Handler,
		},
		{
			MethodName: "InsuranceUnbondRequest",
			Handler:    _Query_InsuranceUnbondRequest_Handler,
		},
		{
			MethodName: "InsuranceUnbondRequests",
			Handler:    _Query_InsuranceUnbondRequests_Handler,
		},
		{
			MethodName: "InsuranceUnbondRequestsByInsuranceProvider",
			Handler:    _Query_InsuranceUnbondRequestsByInsuranceProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/liquidstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidValidators) > 0 {
		for iNdEx := len(m.LiquidValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidStakingStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidStakingStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidStakingStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AliveChunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksByInsuranceProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksByInsuranceProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksByInsuranceProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceProviderAddr) > 0 {
		i -= len(m.InsuranceProviderAddr)
		copy(dAtA[i:], m.InsuranceProviderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InsuranceProviderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliveChunksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliveChunksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliveChunksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AliveChunk) > 0 {
		for iNdEx := len(m.AliveChunk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AliveChunk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingChunksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingChunksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingChunksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingChunksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingChunksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingChunksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChunkBondRequests.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestsByDelegatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestsByDelegatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestsByDelegatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkBondRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkBondRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkBondRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChunkBondRequests) > 0 {
		for iNdEx := len(m.ChunkBondRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChunkBondRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChunkUnbondRequest != nil {
		{
			size, err := m.ChunkUnbondRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UndelegatorAddr) > 0 {
		i -= len(m.UndelegatorAddr)
		copy(dAtA[i:], m.UndelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UndelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkUnbondRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkUnbondRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkUnbondRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChunkUnbondRequests) > 0 {
		for iNdEx := len(m.ChunkUnbondRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChunkUnbondRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InsuranceBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceProviderAddr) > 0 {
		i -= len(m.InsuranceProviderAddr)
		copy(dAtA[i:], m.InsuranceProviderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InsuranceProviderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidsByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidsByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidsByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceBids) > 0 {
		for iNdEx := len(m.InsuranceBids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsuranceBids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InsuranceUnbondRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceProviderAddr) > 0 {
		i -= len(m.InsuranceProviderAddr)
		copy(dAtA[i:], m.InsuranceProviderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InsuranceProviderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceUnbondRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceUnbondRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceUnbondRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceUnbondRequests) > 0 {
		for iNdEx := len(m.InsuranceUnbondRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsuranceUnbondRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidValidators) > 0 {
		for _, e := range m.LiquidValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidStakingStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidStakingStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAliveChunkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryAliveChunkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AliveChunk.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAliveChunksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliveChunksByInsuranceProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsuranceProviderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliveChunksByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliveChunksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AliveChunk) > 0 {
		for _, e := range m.AliveChunk {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnbondingChunksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUnbondingChunksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkBondRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryChunkBondRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChunkBondRequests.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChunkBondRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkBondRequestsByDelegatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkBondRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChunkBondRequests) > 0 {
		for _, e := range m.ChunkBondRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkUnbondRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryChunkUnbondRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkUnbondRequest != nil {
		l = m.ChunkUnbondRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkUnbondRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkUnbondRequestsByUndelegatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UndelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkUnbondRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChunkUnbondRequests) > 0 {
		for _, e := range m.ChunkUnbondRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryInsuranceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InsuranceBid.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInsuranceBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceBidsByInsuranceProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsuranceProviderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceBidsByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InsuranceBids) > 0 {
		for _, e := range m.InsuranceBids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceUnbondRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryInsuranceUnbondRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InsuranceUnbondRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInsuranceUnbondRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsuranceProviderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceUnbondRequestsByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceUnbondRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InsuranceUnbondRequests) > 0 {
		for _, e := range m.InsuranceUnbondRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidValidators = append(m.LiquidValidators, LiquidValidatorState{})
			if err := m.LiquidValidators[len(m.LiquidValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidStakingStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidStakingStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidStakingStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AliveChunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksByInsuranceProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksByInsuranceProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksByInsuranceProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliveChunksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliveChunksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliveChunksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliveChunk = append(m.AliveChunk, AliveChunk{})
			if err := m.AliveChunk[len(m.AliveChunk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingChunksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingChunksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingChunksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingChunksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingChunksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingChunksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkBondRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkBondRequests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestsByDelegatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestsByDelegatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestsByDelegatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkBondRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkBondRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkBondRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkBondRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkBondRequests = append(m.ChunkBondRequests, ChunkBondRequest{})
			if err := m.ChunkBondRequests[len(m.ChunkBondRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkUnbondRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChunkUnbondRequest == nil {
				m.ChunkUnbondRequest = &ChunkUnbondRequest{}
			}
			if err := m.ChunkUnbondRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestsByUndelegatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsByUndelegatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsByUndelegatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkUnbondRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkUnbondRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkUnbondRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkUnbondRequests = append(m.ChunkUnbondRequests, ChunkUnbondRequest{})
			if err := m.ChunkUnbondRequests[len(m.ChunkUnbondRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidsByInsuranceProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidsByInsuranceProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidsByInsuranceProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidsByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidsByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidsByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceBids = append(m.InsuranceBids, InsuranceBid{})
			if err := m.InsuranceBids[len(m.InsuranceBids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceUnbondRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsuranceUnbondRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestsByInsuranceProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsByInsuranceProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsByInsuranceProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceProviderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceProviderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestsByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceUnbondRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceUnbondRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceUnbondRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceUnbondRequests = append(m.InsuranceUnbondRequests, InsuranceUnbondRequest{})
			if err := m.InsuranceUnbondRequests[len(m.InsuranceUnbondRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
