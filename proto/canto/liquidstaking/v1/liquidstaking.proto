syntax = "proto3";
package canto.liquidstaking.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/Canto-Network/Canto/v6/x/liquidstaking/types";

// Epoch defines the epoch of the module.
message Epoch {
  uint64 current_number = 1;
  google.protobuf.Timestamp epoch_start_time = 2
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
  google.protobuf.Duration epoch_duration = 3
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];
  int64 epoch_start_height = 4;
  uint64 epoch_chunk_size = 5;
  uint64 epoch_max_paired_chunk = 6;
}

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // next_epoch_chunk_size is the size of chunk.
  // This param is managed by gov module, but the change
  // will always applied in the next epoch for safety.
  uint64 next_epoch_chunk_size = 1;

  // next_epoch_max_paired_chunk is the maximum number of chunks
  // that can be paired with an insurance.
  uint64 next_epoch_max_paired_chunk = 2;
}

// ChunkStatus defines the status of the chunk.
enum ChunkStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  CHUNK_STATUS_UNSPECIFIED = 0;
  // Default status of a chunk when a msgServer receives MsgLiquidStake.
  // This status indicates that the chunk is ready to be paired
  // with an insurance.
  CHUNK_STATUS_PAIRING = 1;
  // This status indicates that the chunk is paired with an insurance
  // which has the lowest fee rate.
  CHUNK_STATUS_PAIRED = 2;
  // For various reasons, the insurance paired to Chunk can be un-paired.
  // At this time, if there is no insurance candidate,
  // a chunk enters this status.
  CHUNK_STATUS_UNPAIRING_FOR_REPAIRING = 3;
  // When a delegator(= liquid staker) sends a MsgLiquidUnstake, the last ranked
  // paired chunk enters this status and waits until the un-bonding period times
  // out.
  CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE = 4;
}

// Chunk defines the chunk of the module.
message Chunk {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters) = false;

  // Id of the chunk
  uint64 id = 1;
  // Id of Paired insurance, 0 means no insurance
  uint64 insurance_id = 2;
  // Status of the chunk
  ChunkStatus status = 3;
}

// InsuranceStatus defines the status of the insurance.
enum InsuranceStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  INSURANCE_STATUS_UNSPECIFIED = 0;
  // Default status of an insurance when a msgServer receives
  // MsgInsuranceProvide. This status indicates that
  // the insurance is ready to be paired with a chunk.
  INSURANCE_STATUS_PAIRING = 1;
  // This status indicates that the insurance is paired with a chunk.
  // While the insurance is in this status, it serves as a form of protection
  // for the chunk by insuring it against unexpected loss that may occur due to
  // validator slashing.
  INSURANCE_STATUS_PAIRED = 2;
  // For various reasons, the insurance paired to Chunk can enters this status.
  // The insurance in this status wait until
  // the paired chunk's un-bonding period times out.
  INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING = 3;
  // Insurance enters this status when msgServer receives MsgWithdrawInsurance.
  // The insurance waits until the paired chunk's un-bonding period times out.
  INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW = 4;
  // Every begin block, the module checks all insurances have enough balance to
  // cover slash. If not, the insurance enters this status. Insurance provider
  // can re-fill token amount of the insurance by sending MsgRefillInsurance or
  // cancel the insurance by sending MsgCancelInsuranceProvide.
  INSURANCE_STATUS_VULNERABLE = 5;
}

// Insurance defines the insurance of the module.
message Insurance {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters) = false;

  // Id of the insurance
  uint64 id = 1;
  // Address of the validator
  string validator_address = 2;
  // Address of the insurance provider
  string provider_address = 3;
  // Fee rate of the insurance
  string fee_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  InsuranceStatus status = 5;
}

// TODO: Need to message for querying or for internal logic like NetAmountState
// in crescent.