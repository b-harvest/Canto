syntax = "proto3";
package canto.liquidstaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "canto/liquidstaking/v1/liquidstaking.proto";

option go_package = "github.com/Canto-Network/Canto/v6/x/liquidstaking/types";

// TODO: Imagine what queries would be useful on client and frontend side and
// design query endpoints from them.
// TODO: Index keys and values will be determined after the query endpoints are
// designed.

// Query provides defines the gRPC querier service.
service Query {
  // Params retrieves the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/params";
  }

  rpc Chunks(QueryAllChunksRequest) returns (QueryAllChunksResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks";
  }

  rpc Chunk(QueryChunkRequest) returns (QueryChunkResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks/{id}";
  }

  rpc Insurances(QueryAllInsurancesRequest)
      returns (QueryAllInsurancesResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances";
  }

  rpc Insurance(QueryInsuranceRequest) returns (QueryInsuranceResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances/{id}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllChunksRequest {}

message QueryAllChunksResponse { repeated Chunk chunks = 1; }

message QueryChunkRequest { uint64 id = 1; }

message QueryChunkResponse { Chunk chunk = 1; }

message QueryAllInsurancesRequest {}

message QueryAllInsurancesResponse { repeated Insurance insurances = 1; }

message QueryInsuranceRequest { uint64 id = 1; }

message QueryInsuranceResponse { Insurance insurance = 1; }