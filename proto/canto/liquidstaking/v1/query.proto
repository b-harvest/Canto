syntax = "proto3";
package canto.liquidstaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "canto/liquidstaking/v1/liquidstaking.proto";

option go_package = "github.com/Canto-Network/Canto/v6/x/liquidstaking/types";

// TODO: Imagine what queries would be useful on client and frontend side and
// design query endpoints from them.
// TODO: Index keys and values will be determined after the query endpoints are
// designed.

// Query provides defines the gRPC querier service.
service Query {
  // Params retrieves the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/params";
  }

  // Chunk returns all chunks on the module.
  rpc Chunks(QueryAllChunksRequest) returns (QueryChunksResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks";
  }

  // Chunk returns a chunk by id.
  rpc Chunk(QueryChunkRequest) returns (QueryChunkResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks/{id}";
  }

  // Insurances returns all insurances on the module.
  rpc Insurances(QueryAllInsurancesRequest) returns (QueryInsurancesResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances";
  }

  // InsurancesByProviderAddress returns all insurances by provider address.
  rpc InsurancesByProviderAddress(QueryInsurancesByProviderAddressRequest)
      returns (QueryInsurancesResponse) {
    option (google.api.http).get =
        "/canto/liquidstaking/v1/insurances/provider/{provider_address}";
  }

  // Insurance returns an insurance by id.
  rpc Insurance(QueryInsuranceRequest) returns (QueryInsuranceResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances/{id}";
  }

  // Get cumulative commission from last Epoch.
  // Calculated by:
  // Insurance.FeeRate *
  // (Cumulative reward of Chunk from last epoch +
  // DerivedAddress(Chunk.Id).Balance) +
  // DerivedAddress(Insurance.Id).Balance - Insurance.Amount
  rpc InsuranceCommission(QueryInsuranceCommissionRequest)
      returns (QueryInsuranceCommissionResponse) {
    option (google.api.http).get =
        "/canto/liquidstaking/v1/insurances/{id}/commission";
  }

  // TODO: NetAmount rpc
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllChunksRequest {
  // query all chunks in a specific status
  ChunkStatus status = 1;
}

message QueryChunksByProviderAddressRequest { string provider_address = 1; }

message QueryChunksResponse { repeated ChunkResponse chunks = 1; }

message QueryChunkRequest { uint64 id = 1; }

message QueryChunkResponse { Chunk chunk = 1; }

message QueryAllInsurancesRequest {
  // query all insurances pointing to a specific validator
  string validator_address = 1;
  // query all insurances in a specific status
  InsuranceStatus status = 2;
}

message QueryInsurancesByProviderAddressRequest {
  // query all insurances created by specific provider
  string provider_address = 1;
  // query all insurances in a specific status
  InsuranceStatus status = 2;
  // TODO: add status as query param
}

message QueryInsurancesResponse { repeated InsuranceResponse insurances = 1; }

message QueryInsuranceRequest { uint64 id = 1; }

message QueryInsuranceResponse { InsuranceResponse insurance = 1; }

message QueryInsuranceCommissionRequest { uint64 id = 1; }

message QueryInsuranceCommissionResponse {
  cosmos.base.v1beta1.Coin commission = 1;
}

message ChunkResponse {
  // Chunk id
  uint64 id = 1;
  // Amount of native tokens delegated by Chunk.
  // If got slashed, the amount will be reduced.
  // This value can be nil in Pairing status.
  string tokens = 2
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
  // Amount of shares delegated by Chunk.
  // This value can be nil in Pairing status.
  string shares = 3
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // Accumulated reward of the chunk which will be reset at Epoch
  cosmos.base.v1beta1.Coin accumulated_reward = 4;
  // Paired insurance
  Insurance insurance = 5;
  // Status of the chunk
  ChunkStatus status = 6;
}

message InsuranceResponse {
  // Insurance id
  uint64 id = 1;
  // Address of the validator
  string validator_address = 2;
  // Address of the provider
  string provider_address = 3;
  // Amount of native token to guard slashing
  cosmos.base.v1beta1.Coin amount = 4 [ (gogoproto.nullable) = false ];
  // Fee rate of the insurance
  string fee_rate = 5;
  // Paired chunk
  Chunk chunk = 6;
  // Status of the insurance
  InsuranceStatus status = 7;
}
