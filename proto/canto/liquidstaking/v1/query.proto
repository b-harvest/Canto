syntax = "proto3";
package canto.liquidstaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "canto/liquidstaking/v1/liquidstaking.proto";

option go_package = "github.com/Canto-Network/Canto/v6/x/liquidstaking/types";

// TODO: Imagine what queries would be useful on client and frontend side and
// design query endpoints from them.
// TODO: Index keys and values will be determined after the query endpoints are
// designed.

// Query provides defines the gRPC querier service.
service Query {
  // Params retrieves the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/params";
  }

  rpc Chunks(QueryAllChunksRequest) returns (QueryChunksResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks";
  }

  rpc ChunksByProviderAddress(QueryChunksByProviderAddress)
      returns (QueryChunksResponse) {
    option (google.api.http).get =
        "/canto/liquidstaking/v1/chunks/provider/{provider_address}";
  }

  rpc Chunk(QueryChunkRequest) returns (QueryChunkResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/chunks/{id}";
  }

  rpc Insurances(QueryAllInsurancesRequest) returns (QueryInsurancesResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances";
  }

  rpc InsurancesByProviderAddress(QueryInsurancesByProviderAddress)
      returns (QueryInsurancesResponse) {
    option (google.api.http).get =
        "/canto/liquidstaking/v1/insurances/provider/{provider_address}";
  }

  rpc Insurance(QueryInsuranceRequest) returns (QueryInsuranceResponse) {
    option (google.api.http).get = "/canto/liquidstaking/v1/insurances/{id}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllChunksRequest {}

message QueryChunksByProviderAddress { string provider_address = 1; }

message QueryChunksResponse { repeated ChunkResponse chunks = 1; }

message QueryChunkRequest { uint64 id = 1; }

message QueryChunkResponse { Chunk chunk = 1; }

message QueryAllInsurancesRequest {}

message QueryInsurancesByProviderAddress { string provider_address = 1; }

message QueryInsurancesResponse { repeated InsuranceResponse insurances = 1; }

message QueryInsuranceRequest { uint64 id = 1; }

message QueryInsuranceResponse { InsuranceResponse insurance = 1; }

message ChunkResponse {
  // Chunk id
  uint64 id = 1;
  // Amount of the chunk
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
  // Accumulated reward of the chunk which will be reset at Epoch
  cosmos.base.v1beta1.Coin accumulated_reward = 3;
  // Paired insurance
  Insurance insurance = 4;
  // Status of the chunk
  ChunkStatus status = 5;
}

message InsuranceResponse {
  // Insurance id
  uint64 id = 1;
  // Address of the validator
  string validator_address = 2;
  // Address of the provider
  string provider_address = 3;
  // Amount of native token to guard slashing
  cosmos.base.v1beta1.Coin amount = 4 [ (gogoproto.nullable) = false ];
  // Fee rate of the insurance
  string fee_rate = 5;
  // Paired chunk
  Chunk chunk = 6;
  // Status of the insurance
  InsuranceStatus status = 7;
}
